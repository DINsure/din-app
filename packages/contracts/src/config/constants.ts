import { BigNumber } from 'ethers';

// Protocol constants
export const PROTOCOL_CONSTANTS = {
  // Basis points (10000 = 100%)
  MAX_BPS: 10000,
  
  // Default values
  DEFAULT_GAS_BUFFER_PERCENT: 20,
  DEFAULT_CACHE_TTL: 60000, // 1 minute
  DEFAULT_MAX_CACHE_SIZE: 100,
  
  // USDT token configuration
  USDT_DECIMALS: 6,
  USDT_PRECISION: BigNumber.from(10).pow(6),
  
  // DIN token configuration
  DIN_DECIMALS: 18,
  DIN_PRECISION: BigNumber.from(10).pow(18),
  DIN_MAX_SUPPLY: BigNumber.from(100_000_000).mul(BigNumber.from(10).pow(18)), // 100M DIN
  
  // KLAY configuration
  KLAY_DECIMALS: 18,
  KLAY_PRECISION: BigNumber.from(10).pow(18),
  
  // Oracle configuration
  ORACLE_PRICE_DECIMALS: 8,
  ORACLE_PRICE_PRECISION: BigNumber.from(10).pow(8),
  
  // Time constants
  SECONDS_PER_DAY: 86400,
  SECONDS_PER_HOUR: 3600,
  SECONDS_PER_MINUTE: 60,
  
  // Round states
  ROUND_STATES: {
    ANNOUNCED: 0,
    OPEN: 1,
    MATCHED: 2,
    ACTIVE: 3,
    MATURED: 4,
    SETTLED: 5,
    CANCELED: 6,
  } as const,
  
  // Trigger types
  TRIGGER_TYPES: {
    PRICE_BELOW: 0,
    PRICE_ABOVE: 1,
    RELATIVE: 2,
    BOOLEAN: 3,
    CUSTOM: 4,
  } as const,
} as const;

// Contract identifiers (from DinRegistry)
export const CONTRACT_IDENTIFIERS = {
  USDT_TOKEN: 'USDT_TOKEN',
  DIN_TOKEN: 'DIN_TOKEN',
  PRODUCT_CATALOG: 'PRODUCT_CATALOG',
  TRANCHE_POOL_FACTORY: 'TRANCHE_POOL_FACTORY',
  SETTLEMENT_ENGINE: 'SETTLEMENT_ENGINE',
  ORACLE_ROUTER: 'ORACLE_ROUTER',
  ORAKL_PRICE_FEED: 'ORAKL_PRICE_FEED',
  DINO_ORACLE: 'DINO_ORACLE',
  FEE_TREASURY: 'FEE_TREASURY',
} as const;

// Parameter identifiers (from DinRegistry)
export const PARAMETER_IDENTIFIERS = {
  MAX_PREMIUM_BPS: 'MAX_PREMIUM_BPS',
  MIN_MATURITY_SECONDS: 'MIN_MATURITY_SECONDS',
  MAX_MATURITY_SECONDS: 'MAX_MATURITY_SECONDS',
  PROTOCOL_FEE_BPS: 'PROTOCOL_FEE_BPS',
  DISPUTE_WINDOW_SECONDS: 'DISPUTE_WINDOW_SECONDS',
  LIVENESS_WINDOW_SECONDS: 'LIVENESS_WINDOW_SECONDS',
  PER_ACCOUNT_MIN_DEFAULT: 'PER_ACCOUNT_MIN_DEFAULT',
  PER_ACCOUNT_MAX_DEFAULT: 'PER_ACCOUNT_MAX_DEFAULT',
} as const;

// Error codes
export enum ErrorCode {
  // Network errors
  NETWORK_ERROR = 'NETWORK_ERROR',
  RPC_ERROR = 'RPC_ERROR',
  
  // Transaction errors
  INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS',
  USER_REJECTED = 'USER_REJECTED',
  TRANSACTION_FAILED = 'TRANSACTION_FAILED',
  GAS_ESTIMATION_FAILED = 'GAS_ESTIMATION_FAILED',
  
  // Contract errors
  CONTRACT_REVERT = 'CONTRACT_REVERT',
  INVALID_PARAMETERS = 'INVALID_PARAMETERS',
  UNAUTHORIZED = 'UNAUTHORIZED',
  
  // Business logic errors
  ROUND_NOT_OPEN = 'ROUND_NOT_OPEN',
  AMOUNT_TOO_LOW = 'AMOUNT_TOO_LOW',
  AMOUNT_TOO_HIGH = 'AMOUNT_TOO_HIGH',
  TRANCHE_CAP_EXCEEDED = 'TRANCHE_CAP_EXCEEDED',
  INSUFFICIENT_LIQUIDITY = 'INSUFFICIENT_LIQUIDITY',
  
  // Oracle errors
  ORACLE_PRICE_STALE = 'ORACLE_PRICE_STALE',
  ORACLE_UNAVAILABLE = 'ORACLE_UNAVAILABLE',
  
  // Validation errors
  INVALID_ADDRESS = 'INVALID_ADDRESS',
  INVALID_AMOUNT = 'INVALID_AMOUNT',
  INVALID_TRANCHE_ID = 'INVALID_TRANCHE_ID',
  INVALID_ROUND_ID = 'INVALID_ROUND_ID',
}

// Default gas limits for different operations
export const GAS_LIMITS = {
  APPROVE_TOKEN: 50000,
  BUY_INSURANCE: 250000,
  PROVIDE_LIQUIDITY: 200000,
  WITHDRAW_LIQUIDITY: 180000,
  CLAIM_PAYOUT: 150000,
  ORACLE_UPDATE: 100000,
} as const;