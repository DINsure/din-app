/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DinRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DINO_ORACLE"
      | "DIN_TOKEN"
      | "DISPUTE_WINDOW_SECONDS"
      | "FEE_TREASURY"
      | "LIVENESS_WINDOW_SECONDS"
      | "MAX_MATURITY_SECONDS"
      | "MAX_PREMIUM_BPS"
      | "MIN_MATURITY_SECONDS"
      | "OPERATOR_ROLE"
      | "ORACLE_OPERATOR_ROLE"
      | "ORACLE_ROUTER"
      | "ORAKL_PRICE_FEED"
      | "PAUSER_ROLE"
      | "PAUSE_GUARDIAN"
      | "PER_ACCOUNT_MAX_DEFAULT"
      | "PER_ACCOUNT_MIN_DEFAULT"
      | "PREMIUM_ENGINE"
      | "PRODUCT_CATALOG"
      | "PROTOCOL_FEE_BPS"
      | "RESTAKE_RATIO_CAP"
      | "ROUND_MANAGER"
      | "SETTLEMENT_ENGINE"
      | "TRANCHE_POOL_FACTORY"
      | "TREASURY_ROLE"
      | "USDT_TOKEN"
      | "YIELD_ROUTER"
      | "deploymentHashes"
      | "getContractAddress"
      | "getDINToken"
      | "getDinoOracle"
      | "getFeeTreasury"
      | "getMaxMaturitySeconds"
      | "getMaxPremiumBps"
      | "getMinMaturitySeconds"
      | "getOracleRouter"
      | "getOraklPriceFeed"
      | "getParameter"
      | "getParameterBound"
      | "getPremiumEngine"
      | "getProductCatalog"
      | "getProtocolFeeBps"
      | "getRoleAdmin"
      | "getRoundManager"
      | "getSettlementEngine"
      | "getTranchePoolFactory"
      | "getUSDTToken"
      | "getYieldRouter"
      | "grantRole"
      | "hasRole"
      | "isSystemPaused"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setAddress"
      | "setAddresses"
      | "setDeploymentHash"
      | "setParameter"
      | "setParameterBound"
      | "setVersion"
      | "supportsInterface"
      | "unpause"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressSet"
      | "DeploymentHashSet"
      | "ParameterBoundSet"
      | "ParameterSet"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "VersionSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DINO_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DIN_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DISPUTE_WINDOW_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_TREASURY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVENESS_WINDOW_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MATURITY_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PREMIUM_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_MATURITY_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORAKL_PRICE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSE_GUARDIAN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PER_ACCOUNT_MAX_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PER_ACCOUNT_MIN_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREMIUM_ENGINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRODUCT_CATALOG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESTAKE_RATIO_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUND_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SETTLEMENT_ENGINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANCHE_POOL_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YIELD_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentHashes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDINToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDinoOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMaturitySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPremiumBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinMaturitySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraklPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParameter",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParameterBound",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPremiumEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProductCatalog",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTranchePoolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDTToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSystemPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeploymentHash",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setParameter",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParameterBound",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setVersion", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DINO_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DIN_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DISPUTE_WINDOW_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_TREASURY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVENESS_WINDOW_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MATURITY_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PREMIUM_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_MATURITY_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORAKL_PRICE_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSE_GUARDIAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PER_ACCOUNT_MAX_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PER_ACCOUNT_MIN_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREMIUM_ENGINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRODUCT_CATALOG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESTAKE_RATIO_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROUND_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SETTLEMENT_ENGINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANCHE_POOL_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDT_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "YIELD_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDINToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDinoOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMaturitySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPremiumBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinMaturitySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraklPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParameterBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPremiumEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductCatalog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranchePoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDTToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSystemPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeploymentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParameterBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AddressSetEvent {
  export type InputTuple = [
    identifier: BytesLike,
    newAddress: AddressLike,
    oldAddress: AddressLike
  ];
  export type OutputTuple = [
    identifier: string,
    newAddress: string,
    oldAddress: string
  ];
  export interface OutputObject {
    identifier: string;
    newAddress: string;
    oldAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeploymentHashSetEvent {
  export type InputTuple = [name: string, hash: BytesLike];
  export type OutputTuple = [name: string, hash: string];
  export interface OutputObject {
    name: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParameterBoundSetEvent {
  export type InputTuple = [
    identifier: BytesLike,
    newBound: BigNumberish,
    oldBound: BigNumberish
  ];
  export type OutputTuple = [
    identifier: string,
    newBound: bigint,
    oldBound: bigint
  ];
  export interface OutputObject {
    identifier: string;
    newBound: bigint;
    oldBound: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParameterSetEvent {
  export type InputTuple = [
    identifier: BytesLike,
    newValue: BigNumberish,
    oldValue: BigNumberish
  ];
  export type OutputTuple = [
    identifier: string,
    newValue: bigint,
    oldValue: bigint
  ];
  export interface OutputObject {
    identifier: string;
    newValue: bigint;
    oldValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VersionSetEvent {
  export type InputTuple = [newVersion: string, oldVersion: string];
  export type OutputTuple = [newVersion: string, oldVersion: string];
  export interface OutputObject {
    newVersion: string;
    oldVersion: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DinRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DinRegistry;
  waitForDeployment(): Promise<this>;

  interface: DinRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DINO_ORACLE: TypedContractMethod<[], [string], "view">;

  DIN_TOKEN: TypedContractMethod<[], [string], "view">;

  DISPUTE_WINDOW_SECONDS: TypedContractMethod<[], [string], "view">;

  FEE_TREASURY: TypedContractMethod<[], [string], "view">;

  LIVENESS_WINDOW_SECONDS: TypedContractMethod<[], [string], "view">;

  MAX_MATURITY_SECONDS: TypedContractMethod<[], [string], "view">;

  MAX_PREMIUM_BPS: TypedContractMethod<[], [string], "view">;

  MIN_MATURITY_SECONDS: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  ORACLE_OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  ORACLE_ROUTER: TypedContractMethod<[], [string], "view">;

  ORAKL_PRICE_FEED: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSE_GUARDIAN: TypedContractMethod<[], [string], "view">;

  PER_ACCOUNT_MAX_DEFAULT: TypedContractMethod<[], [string], "view">;

  PER_ACCOUNT_MIN_DEFAULT: TypedContractMethod<[], [string], "view">;

  PREMIUM_ENGINE: TypedContractMethod<[], [string], "view">;

  PRODUCT_CATALOG: TypedContractMethod<[], [string], "view">;

  PROTOCOL_FEE_BPS: TypedContractMethod<[], [string], "view">;

  RESTAKE_RATIO_CAP: TypedContractMethod<[], [string], "view">;

  ROUND_MANAGER: TypedContractMethod<[], [string], "view">;

  SETTLEMENT_ENGINE: TypedContractMethod<[], [string], "view">;

  TRANCHE_POOL_FACTORY: TypedContractMethod<[], [string], "view">;

  TREASURY_ROLE: TypedContractMethod<[], [string], "view">;

  USDT_TOKEN: TypedContractMethod<[], [string], "view">;

  YIELD_ROUTER: TypedContractMethod<[], [string], "view">;

  deploymentHashes: TypedContractMethod<[arg0: string], [string], "view">;

  getContractAddress: TypedContractMethod<
    [identifier: BytesLike],
    [string],
    "view"
  >;

  getDINToken: TypedContractMethod<[], [string], "view">;

  getDinoOracle: TypedContractMethod<[], [string], "view">;

  getFeeTreasury: TypedContractMethod<[], [string], "view">;

  getMaxMaturitySeconds: TypedContractMethod<[], [bigint], "view">;

  getMaxPremiumBps: TypedContractMethod<[], [bigint], "view">;

  getMinMaturitySeconds: TypedContractMethod<[], [bigint], "view">;

  getOracleRouter: TypedContractMethod<[], [string], "view">;

  getOraklPriceFeed: TypedContractMethod<[], [string], "view">;

  getParameter: TypedContractMethod<[identifier: BytesLike], [bigint], "view">;

  getParameterBound: TypedContractMethod<
    [identifier: BytesLike],
    [bigint],
    "view"
  >;

  getPremiumEngine: TypedContractMethod<[], [string], "view">;

  getProductCatalog: TypedContractMethod<[], [string], "view">;

  getProtocolFeeBps: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoundManager: TypedContractMethod<[], [string], "view">;

  getSettlementEngine: TypedContractMethod<[], [string], "view">;

  getTranchePoolFactory: TypedContractMethod<[], [string], "view">;

  getUSDTToken: TypedContractMethod<[], [string], "view">;

  getYieldRouter: TypedContractMethod<[], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isSystemPaused: TypedContractMethod<[], [boolean], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAddress: TypedContractMethod<
    [identifier: BytesLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setAddresses: TypedContractMethod<
    [identifiers: BytesLike[], addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setDeploymentHash: TypedContractMethod<
    [name: string, hash: BytesLike],
    [void],
    "nonpayable"
  >;

  setParameter: TypedContractMethod<
    [identifier: BytesLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setParameterBound: TypedContractMethod<
    [identifier: BytesLike, bound: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVersion: TypedContractMethod<[newVersion: string], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DINO_ORACLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DIN_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DISPUTE_WINDOW_SECONDS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_TREASURY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LIVENESS_WINDOW_SECONDS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_MATURITY_SECONDS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_PREMIUM_BPS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_MATURITY_SECONDS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORACLE_OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORAKL_PRICE_FEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSE_GUARDIAN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PER_ACCOUNT_MAX_DEFAULT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PER_ACCOUNT_MIN_DEFAULT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PREMIUM_ENGINE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRODUCT_CATALOG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROTOCOL_FEE_BPS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RESTAKE_RATIO_CAP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROUND_MANAGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SETTLEMENT_ENGINE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRANCHE_POOL_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREASURY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDT_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "YIELD_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deploymentHashes"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "getContractAddress"
  ): TypedContractMethod<[identifier: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDINToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDinoOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMaxMaturitySeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxPremiumBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinMaturitySeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOracleRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOraklPriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getParameter"
  ): TypedContractMethod<[identifier: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getParameterBound"
  ): TypedContractMethod<[identifier: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPremiumEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProductCatalog"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProtocolFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoundManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSettlementEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTranchePoolFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUSDTToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getYieldRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSystemPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddress"
  ): TypedContractMethod<
    [identifier: BytesLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [identifiers: BytesLike[], addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDeploymentHash"
  ): TypedContractMethod<[name: string, hash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setParameter"
  ): TypedContractMethod<
    [identifier: BytesLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setParameterBound"
  ): TypedContractMethod<
    [identifier: BytesLike, bound: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVersion"
  ): TypedContractMethod<[newVersion: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddressSet"
  ): TypedContractEvent<
    AddressSetEvent.InputTuple,
    AddressSetEvent.OutputTuple,
    AddressSetEvent.OutputObject
  >;
  getEvent(
    key: "DeploymentHashSet"
  ): TypedContractEvent<
    DeploymentHashSetEvent.InputTuple,
    DeploymentHashSetEvent.OutputTuple,
    DeploymentHashSetEvent.OutputObject
  >;
  getEvent(
    key: "ParameterBoundSet"
  ): TypedContractEvent<
    ParameterBoundSetEvent.InputTuple,
    ParameterBoundSetEvent.OutputTuple,
    ParameterBoundSetEvent.OutputObject
  >;
  getEvent(
    key: "ParameterSet"
  ): TypedContractEvent<
    ParameterSetEvent.InputTuple,
    ParameterSetEvent.OutputTuple,
    ParameterSetEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VersionSet"
  ): TypedContractEvent<
    VersionSetEvent.InputTuple,
    VersionSetEvent.OutputTuple,
    VersionSetEvent.OutputObject
  >;

  filters: {
    "AddressSet(bytes32,address,address)": TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
    AddressSet: TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;

    "DeploymentHashSet(string,bytes32)": TypedContractEvent<
      DeploymentHashSetEvent.InputTuple,
      DeploymentHashSetEvent.OutputTuple,
      DeploymentHashSetEvent.OutputObject
    >;
    DeploymentHashSet: TypedContractEvent<
      DeploymentHashSetEvent.InputTuple,
      DeploymentHashSetEvent.OutputTuple,
      DeploymentHashSetEvent.OutputObject
    >;

    "ParameterBoundSet(bytes32,uint256,uint256)": TypedContractEvent<
      ParameterBoundSetEvent.InputTuple,
      ParameterBoundSetEvent.OutputTuple,
      ParameterBoundSetEvent.OutputObject
    >;
    ParameterBoundSet: TypedContractEvent<
      ParameterBoundSetEvent.InputTuple,
      ParameterBoundSetEvent.OutputTuple,
      ParameterBoundSetEvent.OutputObject
    >;

    "ParameterSet(bytes32,uint256,uint256)": TypedContractEvent<
      ParameterSetEvent.InputTuple,
      ParameterSetEvent.OutputTuple,
      ParameterSetEvent.OutputObject
    >;
    ParameterSet: TypedContractEvent<
      ParameterSetEvent.InputTuple,
      ParameterSetEvent.OutputTuple,
      ParameterSetEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VersionSet(string,string)": TypedContractEvent<
      VersionSetEvent.InputTuple,
      VersionSetEvent.OutputTuple,
      VersionSetEvent.OutputObject
    >;
    VersionSet: TypedContractEvent<
      VersionSetEvent.InputTuple,
      VersionSetEvent.OutputTuple,
      VersionSetEvent.OutputObject
    >;
  };
}
