/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DinoOracle {
  export type VoterInfoStruct = {
    stakedAmount: BigNumberish;
    lockedUntil: BigNumberish;
    totalVotes: BigNumberish;
    successfulVotes: BigNumberish;
  };

  export type VoterInfoStructOutput = [
    stakedAmount: bigint,
    lockedUntil: bigint,
    totalVotes: bigint,
    successfulVotes: bigint
  ] & {
    stakedAmount: bigint;
    lockedUntil: bigint;
    totalVotes: bigint;
    successfulVotes: bigint;
  };
}

export interface DinoOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DISPUTER_ROLE"
      | "PROPOSER_ROLE"
      | "RESOLVER_ROLE"
      | "addIdentifier"
      | "dinToken"
      | "disputeBond"
      | "disputeProposal"
      | "disputes"
      | "getLatestPrice"
      | "getPrice"
      | "getRoleAdmin"
      | "getSupportedIdentifiers"
      | "getVoterInfo"
      | "grantRole"
      | "hasPrice"
      | "hasRole"
      | "identifierList"
      | "latestPrice"
      | "latestTimestamp"
      | "livenessWindow"
      | "minVoterStake"
      | "nextDisputeId"
      | "nextProposalId"
      | "pause"
      | "paused"
      | "proposalBond"
      | "proposals"
      | "proposePrice"
      | "proposerReputations"
      | "registry"
      | "removeIdentifier"
      | "renounceRole"
      | "resolveDispute"
      | "revokeRole"
      | "settleProposal"
      | "stakeForVoting"
      | "supportedIdentifiers"
      | "supportsInterface"
      | "totalStaked"
      | "unpause"
      | "updateGovernanceParameters"
      | "verifiedPrices"
      | "voteOnDispute"
      | "voters"
      | "votingWindow"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BondSlashed"
      | "DisputeResolved"
      | "IdentifierAdded"
      | "IdentifierRemoved"
      | "Paused"
      | "PriceProposed"
      | "ProposalAccepted"
      | "ProposalDisputed"
      | "RewardsDistributed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StakeDeposited"
      | "StakeWithdrawn"
      | "Unpaused"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISPUTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESOLVER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIdentifier",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "dinToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disputeBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeProposal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedIdentifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "identifierList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimestamp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "livenessWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minVoterStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextDisputeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePrice",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposerReputations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeIdentifier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeForVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedIdentifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateGovernanceParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedPrices",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnDispute",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "votingWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISPUTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESOLVER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dinToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedIdentifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "identifierList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "livenessWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVoterStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextDisputeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposerReputations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeForVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedIdentifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernanceParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace BondSlashedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [user: string, amount: bigint, reason: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    proposalId: BigNumberish,
    disputeSuccessful: boolean,
    votesFor: BigNumberish,
    votesAgainst: BigNumberish
  ];
  export type OutputTuple = [
    disputeId: bigint,
    proposalId: bigint,
    disputeSuccessful: boolean,
    votesFor: bigint,
    votesAgainst: bigint
  ];
  export interface OutputObject {
    disputeId: bigint;
    proposalId: bigint;
    disputeSuccessful: boolean;
    votesFor: bigint;
    votesAgainst: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentifierAddedEvent {
  export type InputTuple = [identifier: BytesLike, description: string];
  export type OutputTuple = [identifier: string, description: string];
  export interface OutputObject {
    identifier: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentifierRemovedEvent {
  export type InputTuple = [identifier: BytesLike];
  export type OutputTuple = [identifier: string];
  export interface OutputObject {
    identifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceProposedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    identifier: BytesLike,
    timestamp: BigNumberish,
    value: BigNumberish,
    proposer: AddressLike,
    bond: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    identifier: string,
    timestamp: bigint,
    value: bigint,
    proposer: string,
    bond: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    identifier: string;
    timestamp: bigint;
    value: bigint;
    proposer: string;
    bond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalAcceptedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    identifier: BytesLike,
    timestamp: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    identifier: string,
    timestamp: bigint,
    value: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    identifier: string;
    timestamp: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalDisputedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    disputeId: BigNumberish,
    disputer: AddressLike,
    bond: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    disputeId: bigint,
    disputer: string,
    bond: bigint,
    reason: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    disputeId: bigint;
    disputer: string;
    bond: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    totalRewards: BigNumberish,
    numRecipients: BigNumberish
  ];
  export type OutputTuple = [totalRewards: bigint, numRecipients: bigint];
  export interface OutputObject {
    totalRewards: bigint;
    numRecipients: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeDepositedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeWithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    voter: AddressLike,
    supportsDispute: boolean,
    stake: BigNumberish
  ];
  export type OutputTuple = [
    disputeId: bigint,
    voter: string,
    supportsDispute: boolean,
    stake: bigint
  ];
  export interface OutputObject {
    disputeId: bigint;
    voter: string;
    supportsDispute: boolean;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DinoOracle extends BaseContract {
  connect(runner?: ContractRunner | null): DinoOracle;
  waitForDeployment(): Promise<this>;

  interface: DinoOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DISPUTER_ROLE: TypedContractMethod<[], [string], "view">;

  PROPOSER_ROLE: TypedContractMethod<[], [string], "view">;

  RESOLVER_ROLE: TypedContractMethod<[], [string], "view">;

  addIdentifier: TypedContractMethod<
    [identifier: BytesLike, description: string],
    [void],
    "nonpayable"
  >;

  dinToken: TypedContractMethod<[], [string], "view">;

  disputeBond: TypedContractMethod<[], [bigint], "view">;

  disputeProposal: TypedContractMethod<
    [proposalId: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;

  disputes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        proposalId: bigint;
        disputer: string;
        disputedAt: bigint;
        state: bigint;
        disputeBond: bigint;
        votingDeadline: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getLatestPrice: TypedContractMethod<
    [identifier: BytesLike],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;

  getPrice: TypedContractMethod<
    [identifier: BytesLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSupportedIdentifiers: TypedContractMethod<[], [string[]], "view">;

  getVoterInfo: TypedContractMethod<
    [voter: AddressLike],
    [DinoOracle.VoterInfoStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasPrice: TypedContractMethod<
    [identifier: BytesLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  identifierList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  latestPrice: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  latestTimestamp: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  livenessWindow: TypedContractMethod<[], [bigint], "view">;

  minVoterStake: TypedContractMethod<[], [bigint], "view">;

  nextDisputeId: TypedContractMethod<[], [bigint], "view">;

  nextProposalId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proposalBond: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        identifier: string;
        timestamp: bigint;
        value: bigint;
        proposer: string;
        proposedAt: bigint;
        state: bigint;
        disputeId: bigint;
        bond: bigint;
        description: string;
      }
    ],
    "view"
  >;

  proposePrice: TypedContractMethod<
    [
      identifier: BytesLike,
      timestamp: BigNumberish,
      value: BigNumberish,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;

  proposerReputations: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  removeIdentifier: TypedContractMethod<
    [identifier: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [disputeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  settleProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakeForVoting: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportedIdentifiers: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateGovernanceParameters: TypedContractMethod<
    [
      _proposalBond: BigNumberish,
      _disputeBond: BigNumberish,
      _livenessWindow: BigNumberish,
      _votingWindow: BigNumberish,
      _minVoterStake: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  verifiedPrices: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  voteOnDispute: TypedContractMethod<
    [
      disputeId: BigNumberish,
      supportsDispute: boolean,
      stakeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        stakedAmount: bigint;
        lockedUntil: bigint;
        totalVotes: bigint;
        successfulVotes: bigint;
      }
    ],
    "view"
  >;

  votingWindow: TypedContractMethod<[], [bigint], "view">;

  withdrawStake: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DISPUTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROPOSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RESOLVER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addIdentifier"
  ): TypedContractMethod<
    [identifier: BytesLike, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dinToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disputeBond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputeProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disputes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        proposalId: bigint;
        disputer: string;
        disputedAt: bigint;
        state: bigint;
        disputeBond: bigint;
        votingDeadline: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestPrice"
  ): TypedContractMethod<
    [identifier: BytesLike],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [identifier: BytesLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSupportedIdentifiers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVoterInfo"
  ): TypedContractMethod<
    [voter: AddressLike],
    [DinoOracle.VoterInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasPrice"
  ): TypedContractMethod<
    [identifier: BytesLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "identifierList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "latestPrice"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestTimestamp"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "livenessWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minVoterStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextDisputeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalBond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        identifier: string;
        timestamp: bigint;
        value: bigint;
        proposer: string;
        proposedAt: bigint;
        state: bigint;
        disputeId: bigint;
        bond: bigint;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposePrice"
  ): TypedContractMethod<
    [
      identifier: BytesLike,
      timestamp: BigNumberish,
      value: BigNumberish,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposerReputations"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeIdentifier"
  ): TypedContractMethod<[identifier: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<[disputeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeForVoting"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedIdentifiers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGovernanceParameters"
  ): TypedContractMethod<
    [
      _proposalBond: BigNumberish,
      _disputeBond: BigNumberish,
      _livenessWindow: BigNumberish,
      _votingWindow: BigNumberish,
      _minVoterStake: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifiedPrices"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "voteOnDispute"
  ): TypedContractMethod<
    [
      disputeId: BigNumberish,
      supportsDispute: boolean,
      stakeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        stakedAmount: bigint;
        lockedUntil: bigint;
        totalVotes: bigint;
        successfulVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BondSlashed"
  ): TypedContractEvent<
    BondSlashedEvent.InputTuple,
    BondSlashedEvent.OutputTuple,
    BondSlashedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "IdentifierAdded"
  ): TypedContractEvent<
    IdentifierAddedEvent.InputTuple,
    IdentifierAddedEvent.OutputTuple,
    IdentifierAddedEvent.OutputObject
  >;
  getEvent(
    key: "IdentifierRemoved"
  ): TypedContractEvent<
    IdentifierRemovedEvent.InputTuple,
    IdentifierRemovedEvent.OutputTuple,
    IdentifierRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceProposed"
  ): TypedContractEvent<
    PriceProposedEvent.InputTuple,
    PriceProposedEvent.OutputTuple,
    PriceProposedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalAccepted"
  ): TypedContractEvent<
    ProposalAcceptedEvent.InputTuple,
    ProposalAcceptedEvent.OutputTuple,
    ProposalAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalDisputed"
  ): TypedContractEvent<
    ProposalDisputedEvent.InputTuple,
    ProposalDisputedEvent.OutputTuple,
    ProposalDisputedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StakeDeposited"
  ): TypedContractEvent<
    StakeDepositedEvent.InputTuple,
    StakeDepositedEvent.OutputTuple,
    StakeDepositedEvent.OutputObject
  >;
  getEvent(
    key: "StakeWithdrawn"
  ): TypedContractEvent<
    StakeWithdrawnEvent.InputTuple,
    StakeWithdrawnEvent.OutputTuple,
    StakeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "BondSlashed(address,uint256,string)": TypedContractEvent<
      BondSlashedEvent.InputTuple,
      BondSlashedEvent.OutputTuple,
      BondSlashedEvent.OutputObject
    >;
    BondSlashed: TypedContractEvent<
      BondSlashedEvent.InputTuple,
      BondSlashedEvent.OutputTuple,
      BondSlashedEvent.OutputObject
    >;

    "DisputeResolved(uint256,uint256,bool,uint256,uint256)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "IdentifierAdded(bytes32,string)": TypedContractEvent<
      IdentifierAddedEvent.InputTuple,
      IdentifierAddedEvent.OutputTuple,
      IdentifierAddedEvent.OutputObject
    >;
    IdentifierAdded: TypedContractEvent<
      IdentifierAddedEvent.InputTuple,
      IdentifierAddedEvent.OutputTuple,
      IdentifierAddedEvent.OutputObject
    >;

    "IdentifierRemoved(bytes32)": TypedContractEvent<
      IdentifierRemovedEvent.InputTuple,
      IdentifierRemovedEvent.OutputTuple,
      IdentifierRemovedEvent.OutputObject
    >;
    IdentifierRemoved: TypedContractEvent<
      IdentifierRemovedEvent.InputTuple,
      IdentifierRemovedEvent.OutputTuple,
      IdentifierRemovedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceProposed(uint256,bytes32,uint256,uint256,address,uint256)": TypedContractEvent<
      PriceProposedEvent.InputTuple,
      PriceProposedEvent.OutputTuple,
      PriceProposedEvent.OutputObject
    >;
    PriceProposed: TypedContractEvent<
      PriceProposedEvent.InputTuple,
      PriceProposedEvent.OutputTuple,
      PriceProposedEvent.OutputObject
    >;

    "ProposalAccepted(uint256,bytes32,uint256,uint256)": TypedContractEvent<
      ProposalAcceptedEvent.InputTuple,
      ProposalAcceptedEvent.OutputTuple,
      ProposalAcceptedEvent.OutputObject
    >;
    ProposalAccepted: TypedContractEvent<
      ProposalAcceptedEvent.InputTuple,
      ProposalAcceptedEvent.OutputTuple,
      ProposalAcceptedEvent.OutputObject
    >;

    "ProposalDisputed(uint256,uint256,address,uint256,string)": TypedContractEvent<
      ProposalDisputedEvent.InputTuple,
      ProposalDisputedEvent.OutputTuple,
      ProposalDisputedEvent.OutputObject
    >;
    ProposalDisputed: TypedContractEvent<
      ProposalDisputedEvent.InputTuple,
      ProposalDisputedEvent.OutputTuple,
      ProposalDisputedEvent.OutputObject
    >;

    "RewardsDistributed(uint256,uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StakeDeposited(address,uint256)": TypedContractEvent<
      StakeDepositedEvent.InputTuple,
      StakeDepositedEvent.OutputTuple,
      StakeDepositedEvent.OutputObject
    >;
    StakeDeposited: TypedContractEvent<
      StakeDepositedEvent.InputTuple,
      StakeDepositedEvent.OutputTuple,
      StakeDepositedEvent.OutputObject
    >;

    "StakeWithdrawn(address,uint256)": TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
    StakeWithdrawn: TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
