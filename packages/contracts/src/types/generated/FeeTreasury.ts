/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FeeTreasury {
  export type RecipientStruct = {
    recipient: AddressLike;
    basisPoints: BigNumberish;
    active: boolean;
    description: string;
  };

  export type RecipientStructOutput = [
    recipient: string,
    basisPoints: bigint,
    active: boolean,
    description: string
  ] & {
    recipient: string;
    basisPoints: bigint;
    active: boolean;
    description: string;
  };

  export type FeeSourceStruct = {
    source: AddressLike;
    description: string;
    totalFeesReceived: BigNumberish;
    active: boolean;
  };

  export type FeeSourceStructOutput = [
    source: string,
    description: string,
    totalFeesReceived: bigint,
    active: boolean
  ] & {
    source: string;
    description: string;
    totalFeesReceived: bigint;
    active: boolean;
  };

  export type TokenBalanceStruct = {
    token: AddressLike;
    totalReceived: BigNumberish;
    totalDistributed: BigNumberish;
    currentBalance: BigNumberish;
    lastSweepTime: BigNumberish;
  };

  export type TokenBalanceStructOutput = [
    token: string,
    totalReceived: bigint,
    totalDistributed: bigint,
    currentBalance: bigint,
    lastSweepTime: bigint
  ] & {
    token: string;
    totalReceived: bigint;
    totalDistributed: bigint;
    currentBalance: bigint;
    lastSweepTime: bigint;
  };
}

export interface FeeTreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "TREASURY_ROLE"
      | "activeSources"
      | "addRecipient"
      | "canSweepToken"
      | "emergencyMode"
      | "emergencyRecipient"
      | "emergencySweep"
      | "feeSources"
      | "getAllRecipients"
      | "getFeeSources"
      | "getRoleAdmin"
      | "getTokenBalances"
      | "grantRole"
      | "hasRole"
      | "lastGlobalSweep"
      | "minimumSweepInterval"
      | "nextRecipientId"
      | "pause"
      | "paused"
      | "receiveFees"
      | "recipientIds"
      | "recipients"
      | "registerFeeSource"
      | "renounceRole"
      | "revokeRole"
      | "setEmergencyMode"
      | "setEmergencyRecipient"
      | "setMinimumSweepInterval"
      | "supportsInterface"
      | "sweepAllTokens"
      | "sweepToken"
      | "tokenBalances"
      | "totalAllocationBps"
      | "trackedTokens"
      | "unpause"
      | "updateRecipient"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyModeToggled"
      | "FeeReceived"
      | "FeeSourceRegistered"
      | "FeesSwept"
      | "Paused"
      | "RecipientAdded"
      | "RecipientPaid"
      | "RecipientUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SweepIntervalUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeSources",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRecipient",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canSweepToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencySweep",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeSources",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRecipients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastGlobalSweep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumSweepInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRecipientId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveFees",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recipients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFeeSource",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumSweepInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocationBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trackedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateRecipient",
    values: [BigNumberish, AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canSweepToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencySweep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeSources", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastGlobalSweep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumSweepInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRecipientId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recipients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFeeSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumSweepInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocationBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trackedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRecipient",
    data: BytesLike
  ): Result;
}

export namespace EmergencyModeToggledEvent {
  export type InputTuple = [enabled: boolean, emergencyRecipient: AddressLike];
  export type OutputTuple = [enabled: boolean, emergencyRecipient: string];
  export interface OutputObject {
    enabled: boolean;
    emergencyRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReceivedEvent {
  export type InputTuple = [
    source: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    sourceDescription: string
  ];
  export type OutputTuple = [
    source: string,
    token: string,
    amount: bigint,
    sourceDescription: string
  ];
  export interface OutputObject {
    source: string;
    token: string;
    amount: bigint;
    sourceDescription: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeSourceRegisteredEvent {
  export type InputTuple = [source: AddressLike, description: string];
  export type OutputTuple = [source: string, description: string];
  export interface OutputObject {
    source: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesSweptEvent {
  export type InputTuple = [
    token: AddressLike,
    totalAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    totalAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    token: string;
    totalAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientAddedEvent {
  export type InputTuple = [
    recipientId: BigNumberish,
    recipient: AddressLike,
    basisPoints: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    recipientId: bigint,
    recipient: string,
    basisPoints: bigint,
    description: string
  ];
  export interface OutputObject {
    recipientId: bigint;
    recipient: string;
    basisPoints: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientPaidEvent {
  export type InputTuple = [
    recipient: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    recipientId: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    recipient: string,
    token: string,
    amount: bigint,
    recipientId: bigint,
    description: string
  ];
  export interface OutputObject {
    recipient: string;
    token: string;
    amount: bigint;
    recipientId: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientUpdatedEvent {
  export type InputTuple = [
    recipientId: BigNumberish,
    newRecipient: AddressLike,
    newBasisPoints: BigNumberish,
    active: boolean
  ];
  export type OutputTuple = [
    recipientId: bigint,
    newRecipient: string,
    newBasisPoints: bigint,
    active: boolean
  ];
  export interface OutputObject {
    recipientId: bigint;
    newRecipient: string;
    newBasisPoints: bigint;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SweepIntervalUpdatedEvent {
  export type InputTuple = [
    oldInterval: BigNumberish,
    newInterval: BigNumberish
  ];
  export type OutputTuple = [oldInterval: bigint, newInterval: bigint];
  export interface OutputObject {
    oldInterval: bigint;
    newInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeTreasury extends BaseContract {
  connect(runner?: ContractRunner | null): FeeTreasury;
  waitForDeployment(): Promise<this>;

  interface: FeeTreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  TREASURY_ROLE: TypedContractMethod<[], [string], "view">;

  activeSources: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addRecipient: TypedContractMethod<
    [recipient: AddressLike, basisPoints: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;

  canSweepToken: TypedContractMethod<
    [token: AddressLike],
    [[boolean, string] & { reason: string }],
    "view"
  >;

  emergencyMode: TypedContractMethod<[], [boolean], "view">;

  emergencyRecipient: TypedContractMethod<[], [string], "view">;

  emergencySweep: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  feeSources: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean] & {
        source: string;
        description: string;
        totalFeesReceived: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getAllRecipients: TypedContractMethod<
    [],
    [
      [bigint[], FeeTreasury.RecipientStructOutput[]] & {
        ids: bigint[];
        recipientList: FeeTreasury.RecipientStructOutput[];
      }
    ],
    "view"
  >;

  getFeeSources: TypedContractMethod<
    [],
    [
      [string[], FeeTreasury.FeeSourceStructOutput[]] & {
        sources: string[];
        sourceData: FeeTreasury.FeeSourceStructOutput[];
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenBalances: TypedContractMethod<
    [],
    [
      [string[], FeeTreasury.TokenBalanceStructOutput[]] & {
        tokens: string[];
        balances: FeeTreasury.TokenBalanceStructOutput[];
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  lastGlobalSweep: TypedContractMethod<[], [bigint], "view">;

  minimumSweepInterval: TypedContractMethod<[], [bigint], "view">;

  nextRecipientId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  receiveFees: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, sourceDescription: string],
    [void],
    "nonpayable"
  >;

  recipientIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  recipients: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, string] & {
        recipient: string;
        basisPoints: bigint;
        active: boolean;
        description: string;
      }
    ],
    "view"
  >;

  registerFeeSource: TypedContractMethod<
    [source: AddressLike, description: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setEmergencyMode: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  setEmergencyRecipient: TypedContractMethod<
    [newEmergencyRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinimumSweepInterval: TypedContractMethod<
    [newInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  sweepAllTokens: TypedContractMethod<[], [void], "nonpayable">;

  sweepToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  tokenBalances: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        token: string;
        totalReceived: bigint;
        totalDistributed: bigint;
        currentBalance: bigint;
        lastSweepTime: bigint;
      }
    ],
    "view"
  >;

  totalAllocationBps: TypedContractMethod<[], [bigint], "view">;

  trackedTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateRecipient: TypedContractMethod<
    [
      recipientId: BigNumberish,
      newRecipient: AddressLike,
      newBasisPoints: BigNumberish,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREASURY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeSources"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addRecipient"
  ): TypedContractMethod<
    [recipient: AddressLike, basisPoints: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canSweepToken"
  ): TypedContractMethod<
    [token: AddressLike],
    [[boolean, string] & { reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencySweep"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeSources"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean] & {
        source: string;
        description: string;
        totalFeesReceived: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllRecipients"
  ): TypedContractMethod<
    [],
    [
      [bigint[], FeeTreasury.RecipientStructOutput[]] & {
        ids: bigint[];
        recipientList: FeeTreasury.RecipientStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeSources"
  ): TypedContractMethod<
    [],
    [
      [string[], FeeTreasury.FeeSourceStructOutput[]] & {
        sources: string[];
        sourceData: FeeTreasury.FeeSourceStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenBalances"
  ): TypedContractMethod<
    [],
    [
      [string[], FeeTreasury.TokenBalanceStructOutput[]] & {
        tokens: string[];
        balances: FeeTreasury.TokenBalanceStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastGlobalSweep"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumSweepInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextRecipientId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "receiveFees"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, sourceDescription: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recipientIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "recipients"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, string] & {
        recipient: string;
        basisPoints: bigint;
        active: boolean;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerFeeSource"
  ): TypedContractMethod<
    [source: AddressLike, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyMode"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyRecipient"
  ): TypedContractMethod<
    [newEmergencyRecipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumSweepInterval"
  ): TypedContractMethod<[newInterval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "sweepAllTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sweepToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenBalances"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        token: string;
        totalReceived: bigint;
        totalDistributed: bigint;
        currentBalance: bigint;
        lastSweepTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalAllocationBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trackedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRecipient"
  ): TypedContractMethod<
    [
      recipientId: BigNumberish,
      newRecipient: AddressLike,
      newBasisPoints: BigNumberish,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EmergencyModeToggled"
  ): TypedContractEvent<
    EmergencyModeToggledEvent.InputTuple,
    EmergencyModeToggledEvent.OutputTuple,
    EmergencyModeToggledEvent.OutputObject
  >;
  getEvent(
    key: "FeeReceived"
  ): TypedContractEvent<
    FeeReceivedEvent.InputTuple,
    FeeReceivedEvent.OutputTuple,
    FeeReceivedEvent.OutputObject
  >;
  getEvent(
    key: "FeeSourceRegistered"
  ): TypedContractEvent<
    FeeSourceRegisteredEvent.InputTuple,
    FeeSourceRegisteredEvent.OutputTuple,
    FeeSourceRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "FeesSwept"
  ): TypedContractEvent<
    FeesSweptEvent.InputTuple,
    FeesSweptEvent.OutputTuple,
    FeesSweptEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientAdded"
  ): TypedContractEvent<
    RecipientAddedEvent.InputTuple,
    RecipientAddedEvent.OutputTuple,
    RecipientAddedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientPaid"
  ): TypedContractEvent<
    RecipientPaidEvent.InputTuple,
    RecipientPaidEvent.OutputTuple,
    RecipientPaidEvent.OutputObject
  >;
  getEvent(
    key: "RecipientUpdated"
  ): TypedContractEvent<
    RecipientUpdatedEvent.InputTuple,
    RecipientUpdatedEvent.OutputTuple,
    RecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SweepIntervalUpdated"
  ): TypedContractEvent<
    SweepIntervalUpdatedEvent.InputTuple,
    SweepIntervalUpdatedEvent.OutputTuple,
    SweepIntervalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EmergencyModeToggled(bool,address)": TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;
    EmergencyModeToggled: TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;

    "FeeReceived(address,address,uint256,string)": TypedContractEvent<
      FeeReceivedEvent.InputTuple,
      FeeReceivedEvent.OutputTuple,
      FeeReceivedEvent.OutputObject
    >;
    FeeReceived: TypedContractEvent<
      FeeReceivedEvent.InputTuple,
      FeeReceivedEvent.OutputTuple,
      FeeReceivedEvent.OutputObject
    >;

    "FeeSourceRegistered(address,string)": TypedContractEvent<
      FeeSourceRegisteredEvent.InputTuple,
      FeeSourceRegisteredEvent.OutputTuple,
      FeeSourceRegisteredEvent.OutputObject
    >;
    FeeSourceRegistered: TypedContractEvent<
      FeeSourceRegisteredEvent.InputTuple,
      FeeSourceRegisteredEvent.OutputTuple,
      FeeSourceRegisteredEvent.OutputObject
    >;

    "FeesSwept(address,uint256,uint256)": TypedContractEvent<
      FeesSweptEvent.InputTuple,
      FeesSweptEvent.OutputTuple,
      FeesSweptEvent.OutputObject
    >;
    FeesSwept: TypedContractEvent<
      FeesSweptEvent.InputTuple,
      FeesSweptEvent.OutputTuple,
      FeesSweptEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RecipientAdded(uint256,address,uint256,string)": TypedContractEvent<
      RecipientAddedEvent.InputTuple,
      RecipientAddedEvent.OutputTuple,
      RecipientAddedEvent.OutputObject
    >;
    RecipientAdded: TypedContractEvent<
      RecipientAddedEvent.InputTuple,
      RecipientAddedEvent.OutputTuple,
      RecipientAddedEvent.OutputObject
    >;

    "RecipientPaid(address,address,uint256,uint256,string)": TypedContractEvent<
      RecipientPaidEvent.InputTuple,
      RecipientPaidEvent.OutputTuple,
      RecipientPaidEvent.OutputObject
    >;
    RecipientPaid: TypedContractEvent<
      RecipientPaidEvent.InputTuple,
      RecipientPaidEvent.OutputTuple,
      RecipientPaidEvent.OutputObject
    >;

    "RecipientUpdated(uint256,address,uint256,bool)": TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;
    RecipientUpdated: TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SweepIntervalUpdated(uint256,uint256)": TypedContractEvent<
      SweepIntervalUpdatedEvent.InputTuple,
      SweepIntervalUpdatedEvent.OutputTuple,
      SweepIntervalUpdatedEvent.OutputObject
    >;
    SweepIntervalUpdated: TypedContractEvent<
      SweepIntervalUpdatedEvent.InputTuple,
      SweepIntervalUpdatedEvent.OutputTuple,
      SweepIntervalUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
