/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IProductCatalog {
  export type RoundStruct = {
    roundId: BigNumberish;
    trancheId: BigNumberish;
    salesStartTime: BigNumberish;
    salesEndTime: BigNumberish;
    state: BigNumberish;
    totalBuyerPurchases: BigNumberish;
    totalSellerCollateral: BigNumberish;
    matchedAmount: BigNumberish;
    createdAt: BigNumberish;
    stateChangedAt: BigNumberish;
  };

  export type RoundStructOutput = [
    roundId: bigint,
    trancheId: bigint,
    salesStartTime: bigint,
    salesEndTime: bigint,
    state: bigint,
    totalBuyerPurchases: bigint,
    totalSellerCollateral: bigint,
    matchedAmount: bigint,
    createdAt: bigint,
    stateChangedAt: bigint
  ] & {
    roundId: bigint;
    trancheId: bigint;
    salesStartTime: bigint;
    salesEndTime: bigint;
    state: bigint;
    totalBuyerPurchases: bigint;
    totalSellerCollateral: bigint;
    matchedAmount: bigint;
    createdAt: bigint;
    stateChangedAt: bigint;
  };

  export type TrancheSpecStruct = {
    trancheId: BigNumberish;
    productId: BigNumberish;
    triggerType: BigNumberish;
    threshold: BigNumberish;
    maturityTimestamp: BigNumberish;
    premiumRateBps: BigNumberish;
    perAccountMin: BigNumberish;
    perAccountMax: BigNumberish;
    trancheCap: BigNumberish;
    oracleRouteId: BigNumberish;
    active: boolean;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    roundIds: BigNumberish[];
  };

  export type TrancheSpecStructOutput = [
    trancheId: bigint,
    productId: bigint,
    triggerType: bigint,
    threshold: bigint,
    maturityTimestamp: bigint,
    premiumRateBps: bigint,
    perAccountMin: bigint,
    perAccountMax: bigint,
    trancheCap: bigint,
    oracleRouteId: bigint,
    active: boolean,
    createdAt: bigint,
    updatedAt: bigint,
    roundIds: bigint[]
  ] & {
    trancheId: bigint;
    productId: bigint;
    triggerType: bigint;
    threshold: bigint;
    maturityTimestamp: bigint;
    premiumRateBps: bigint;
    perAccountMin: bigint;
    perAccountMax: bigint;
    trancheCap: bigint;
    oracleRouteId: bigint;
    active: boolean;
    createdAt: bigint;
    updatedAt: bigint;
    roundIds: bigint[];
  };
}

export interface IProductCatalogInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closeAndMarkMatched"
      | "getRound"
      | "getTranche"
      | "updateRoundState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeAndMarkMatched",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranche",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoundState",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeAndMarkMatched",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTranche", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRoundState",
    data: BytesLike
  ): Result;
}

export interface IProductCatalog extends BaseContract {
  connect(runner?: ContractRunner | null): IProductCatalog;
  waitForDeployment(): Promise<this>;

  interface: IProductCatalogInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeAndMarkMatched: TypedContractMethod<
    [roundId: BigNumberish, matchedAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getRound: TypedContractMethod<
    [roundId: BigNumberish],
    [IProductCatalog.RoundStructOutput],
    "view"
  >;

  getTranche: TypedContractMethod<
    [trancheId: BigNumberish],
    [IProductCatalog.TrancheSpecStructOutput],
    "view"
  >;

  updateRoundState: TypedContractMethod<
    [roundId: BigNumberish, newState: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeAndMarkMatched"
  ): TypedContractMethod<
    [roundId: BigNumberish, matchedAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IProductCatalog.RoundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTranche"
  ): TypedContractMethod<
    [trancheId: BigNumberish],
    [IProductCatalog.TrancheSpecStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateRoundState"
  ): TypedContractMethod<
    [roundId: BigNumberish, newState: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
