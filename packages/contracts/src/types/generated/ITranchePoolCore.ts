/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ITranchePoolCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "depositFromYield"
      | "getAvailableForYield"
      | "getTrancheInfo"
      | "withdrawForYield"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositFromYield",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableForYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrancheInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForYield",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositFromYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableForYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrancheInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForYield",
    data: BytesLike
  ): Result;
}

export interface ITranchePoolCore extends BaseContract {
  connect(runner?: ContractRunner | null): ITranchePoolCore;
  waitForDeployment(): Promise<this>;

  interface: ITranchePoolCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositFromYield: TypedContractMethod<
    [principalAmount: BigNumberish, yieldAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getAvailableForYield: TypedContractMethod<[], [bigint], "view">;

  getTrancheInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, string, boolean] & {
        trancheId: bigint;
        productId: bigint;
        productCatalog: string;
        active: boolean;
      }
    ],
    "view"
  >;

  withdrawForYield: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositFromYield"
  ): TypedContractMethod<
    [principalAmount: BigNumberish, yieldAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableForYield"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTrancheInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string, boolean] & {
        trancheId: bigint;
        productId: bigint;
        productCatalog: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawForYield"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;

  filters: {};
}
