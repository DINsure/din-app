/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace OracleRouter {
  export type PriceResultStruct = {
    price: BigNumberish;
    timestamp: BigNumberish;
    source: BigNumberish;
    valid: boolean;
    error: string;
  };

  export type PriceResultStructOutput = [
    price: bigint,
    timestamp: bigint,
    source: bigint,
    valid: boolean,
    error: string
  ] & {
    price: bigint;
    timestamp: bigint;
    source: bigint;
    valid: boolean;
    error: string;
  };

  export type OracleConfigStruct = {
    primaryType: BigNumberish;
    fallbackStrategy: BigNumberish;
    maxPriceDeviationBps: BigNumberish;
    maxStaleness: BigNumberish;
    active: boolean;
    description: string;
  };

  export type OracleConfigStructOutput = [
    primaryType: bigint,
    fallbackStrategy: bigint,
    maxPriceDeviationBps: bigint,
    maxStaleness: bigint,
    active: boolean,
    description: string
  ] & {
    primaryType: bigint;
    fallbackStrategy: bigint;
    maxPriceDeviationBps: bigint;
    maxStaleness: bigint;
    active: boolean;
    description: string;
  };
}

export interface OracleRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "comparePrices"
      | "configureOracle"
      | "configuredIdentifiers"
      | "deactivateOracle"
      | "dinoOracle"
      | "emergencyMode"
      | "getConfiguredIdentifiers"
      | "getOracleConfig"
      | "getPrice"
      | "getPriceAtTimestamp"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isConfigured"
      | "lastDinoPrice"
      | "lastOraklPrice"
      | "lastPriceUpdate"
      | "manualPrices"
      | "oracleConfigs"
      | "oraklFeed"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setEmergencyMode"
      | "setManualPrice"
      | "supportsInterface"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyModeToggled"
      | "FallbackTriggered"
      | "ManualPriceSet"
      | "OracleConfigured"
      | "Paused"
      | "PriceDeviationAlert"
      | "PriceRequested"
      | "PriceRetrieved"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comparePrices",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureOracle",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configuredIdentifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateOracle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dinoOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguredIdentifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPriceAtTimestamp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfigured",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDinoPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastOraklPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPriceUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manualPrices",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleConfigs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oraklFeed", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyMode",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setManualPrice",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comparePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configuredIdentifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dinoOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguredIdentifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceAtTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConfigured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDinoPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOraklPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oraklFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace EmergencyModeToggledEvent {
  export type InputTuple = [identifier: BytesLike, enabled: boolean];
  export type OutputTuple = [identifier: string, enabled: boolean];
  export interface OutputObject {
    identifier: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackTriggeredEvent {
  export type InputTuple = [
    identifier: BytesLike,
    failedType: BigNumberish,
    fallbackType: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    identifier: string,
    failedType: bigint,
    fallbackType: bigint,
    reason: string
  ];
  export interface OutputObject {
    identifier: string;
    failedType: bigint;
    fallbackType: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManualPriceSetEvent {
  export type InputTuple = [
    identifier: BytesLike,
    timestamp: BigNumberish,
    price: BigNumberish,
    setter: AddressLike
  ];
  export type OutputTuple = [
    identifier: string,
    timestamp: bigint,
    price: bigint,
    setter: string
  ];
  export interface OutputObject {
    identifier: string;
    timestamp: bigint;
    price: bigint;
    setter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleConfiguredEvent {
  export type InputTuple = [
    identifier: BytesLike,
    primaryType: BigNumberish,
    fallbackStrategy: BigNumberish,
    maxDeviationBps: BigNumberish,
    maxStaleness: BigNumberish
  ];
  export type OutputTuple = [
    identifier: string,
    primaryType: bigint,
    fallbackStrategy: bigint,
    maxDeviationBps: bigint,
    maxStaleness: bigint
  ];
  export interface OutputObject {
    identifier: string;
    primaryType: bigint;
    fallbackStrategy: bigint;
    maxDeviationBps: bigint;
    maxStaleness: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceDeviationAlertEvent {
  export type InputTuple = [
    identifier: BytesLike,
    oraklPrice: BigNumberish,
    dinoPrice: BigNumberish,
    deviationBps: BigNumberish
  ];
  export type OutputTuple = [
    identifier: string,
    oraklPrice: bigint,
    dinoPrice: bigint,
    deviationBps: bigint
  ];
  export interface OutputObject {
    identifier: string;
    oraklPrice: bigint;
    dinoPrice: bigint;
    deviationBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceRequestedEvent {
  export type InputTuple = [
    identifier: BytesLike,
    timestamp: BigNumberish,
    requestedType: BigNumberish
  ];
  export type OutputTuple = [
    identifier: string,
    timestamp: bigint,
    requestedType: bigint
  ];
  export interface OutputObject {
    identifier: string;
    timestamp: bigint;
    requestedType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceRetrievedEvent {
  export type InputTuple = [
    identifier: BytesLike,
    price: BigNumberish,
    timestamp: BigNumberish,
    source: BigNumberish
  ];
  export type OutputTuple = [
    identifier: string,
    price: bigint,
    timestamp: bigint,
    source: bigint
  ];
  export interface OutputObject {
    identifier: string;
    price: bigint;
    timestamp: bigint;
    source: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OracleRouter extends BaseContract {
  connect(runner?: ContractRunner | null): OracleRouter;
  waitForDeployment(): Promise<this>;

  interface: OracleRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  comparePrices: TypedContractMethod<
    [identifier: BytesLike],
    [
      [
        OracleRouter.PriceResultStructOutput,
        OracleRouter.PriceResultStructOutput,
        bigint
      ] & {
        oraklResult: OracleRouter.PriceResultStructOutput;
        dinoResult: OracleRouter.PriceResultStructOutput;
        deviation: bigint;
      }
    ],
    "view"
  >;

  configureOracle: TypedContractMethod<
    [
      identifier: BytesLike,
      primaryType: BigNumberish,
      fallbackStrategy: BigNumberish,
      maxDeviationBps: BigNumberish,
      maxStaleness: BigNumberish,
      description: string
    ],
    [void],
    "nonpayable"
  >;

  configuredIdentifiers: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  deactivateOracle: TypedContractMethod<
    [identifier: BytesLike],
    [void],
    "nonpayable"
  >;

  dinoOracle: TypedContractMethod<[], [string], "view">;

  emergencyMode: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getConfiguredIdentifiers: TypedContractMethod<[], [string[]], "view">;

  getOracleConfig: TypedContractMethod<
    [identifier: BytesLike],
    [OracleRouter.OracleConfigStructOutput],
    "view"
  >;

  getPrice: TypedContractMethod<
    [identifier: BytesLike],
    [OracleRouter.PriceResultStructOutput],
    "view"
  >;

  getPriceAtTimestamp: TypedContractMethod<
    [identifier: BytesLike, timestamp: BigNumberish],
    [OracleRouter.PriceResultStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isConfigured: TypedContractMethod<[identifier: BytesLike], [boolean], "view">;

  lastDinoPrice: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  lastOraklPrice: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  lastPriceUpdate: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  manualPrices: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  oracleConfigs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, boolean, string] & {
        primaryType: bigint;
        fallbackStrategy: bigint;
        maxPriceDeviationBps: bigint;
        maxStaleness: bigint;
        active: boolean;
        description: string;
      }
    ],
    "view"
  >;

  oraklFeed: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setEmergencyMode: TypedContractMethod<
    [identifier: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setManualPrice: TypedContractMethod<
    [identifier: BytesLike, timestamp: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "comparePrices"
  ): TypedContractMethod<
    [identifier: BytesLike],
    [
      [
        OracleRouter.PriceResultStructOutput,
        OracleRouter.PriceResultStructOutput,
        bigint
      ] & {
        oraklResult: OracleRouter.PriceResultStructOutput;
        dinoResult: OracleRouter.PriceResultStructOutput;
        deviation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "configureOracle"
  ): TypedContractMethod<
    [
      identifier: BytesLike,
      primaryType: BigNumberish,
      fallbackStrategy: BigNumberish,
      maxDeviationBps: BigNumberish,
      maxStaleness: BigNumberish,
      description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configuredIdentifiers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deactivateOracle"
  ): TypedContractMethod<[identifier: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dinoOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getConfiguredIdentifiers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOracleConfig"
  ): TypedContractMethod<
    [identifier: BytesLike],
    [OracleRouter.OracleConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [identifier: BytesLike],
    [OracleRouter.PriceResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceAtTimestamp"
  ): TypedContractMethod<
    [identifier: BytesLike, timestamp: BigNumberish],
    [OracleRouter.PriceResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isConfigured"
  ): TypedContractMethod<[identifier: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastDinoPrice"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastOraklPrice"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastPriceUpdate"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "manualPrices"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "oracleConfigs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, boolean, string] & {
        primaryType: bigint;
        fallbackStrategy: bigint;
        maxPriceDeviationBps: bigint;
        maxStaleness: bigint;
        active: boolean;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "oraklFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyMode"
  ): TypedContractMethod<
    [identifier: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManualPrice"
  ): TypedContractMethod<
    [identifier: BytesLike, timestamp: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EmergencyModeToggled"
  ): TypedContractEvent<
    EmergencyModeToggledEvent.InputTuple,
    EmergencyModeToggledEvent.OutputTuple,
    EmergencyModeToggledEvent.OutputObject
  >;
  getEvent(
    key: "FallbackTriggered"
  ): TypedContractEvent<
    FallbackTriggeredEvent.InputTuple,
    FallbackTriggeredEvent.OutputTuple,
    FallbackTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "ManualPriceSet"
  ): TypedContractEvent<
    ManualPriceSetEvent.InputTuple,
    ManualPriceSetEvent.OutputTuple,
    ManualPriceSetEvent.OutputObject
  >;
  getEvent(
    key: "OracleConfigured"
  ): TypedContractEvent<
    OracleConfiguredEvent.InputTuple,
    OracleConfiguredEvent.OutputTuple,
    OracleConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceDeviationAlert"
  ): TypedContractEvent<
    PriceDeviationAlertEvent.InputTuple,
    PriceDeviationAlertEvent.OutputTuple,
    PriceDeviationAlertEvent.OutputObject
  >;
  getEvent(
    key: "PriceRequested"
  ): TypedContractEvent<
    PriceRequestedEvent.InputTuple,
    PriceRequestedEvent.OutputTuple,
    PriceRequestedEvent.OutputObject
  >;
  getEvent(
    key: "PriceRetrieved"
  ): TypedContractEvent<
    PriceRetrievedEvent.InputTuple,
    PriceRetrievedEvent.OutputTuple,
    PriceRetrievedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EmergencyModeToggled(bytes32,bool)": TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;
    EmergencyModeToggled: TypedContractEvent<
      EmergencyModeToggledEvent.InputTuple,
      EmergencyModeToggledEvent.OutputTuple,
      EmergencyModeToggledEvent.OutputObject
    >;

    "FallbackTriggered(bytes32,uint8,uint8,string)": TypedContractEvent<
      FallbackTriggeredEvent.InputTuple,
      FallbackTriggeredEvent.OutputTuple,
      FallbackTriggeredEvent.OutputObject
    >;
    FallbackTriggered: TypedContractEvent<
      FallbackTriggeredEvent.InputTuple,
      FallbackTriggeredEvent.OutputTuple,
      FallbackTriggeredEvent.OutputObject
    >;

    "ManualPriceSet(bytes32,uint256,uint256,address)": TypedContractEvent<
      ManualPriceSetEvent.InputTuple,
      ManualPriceSetEvent.OutputTuple,
      ManualPriceSetEvent.OutputObject
    >;
    ManualPriceSet: TypedContractEvent<
      ManualPriceSetEvent.InputTuple,
      ManualPriceSetEvent.OutputTuple,
      ManualPriceSetEvent.OutputObject
    >;

    "OracleConfigured(bytes32,uint8,uint8,uint256,uint256)": TypedContractEvent<
      OracleConfiguredEvent.InputTuple,
      OracleConfiguredEvent.OutputTuple,
      OracleConfiguredEvent.OutputObject
    >;
    OracleConfigured: TypedContractEvent<
      OracleConfiguredEvent.InputTuple,
      OracleConfiguredEvent.OutputTuple,
      OracleConfiguredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceDeviationAlert(bytes32,uint256,uint256,uint256)": TypedContractEvent<
      PriceDeviationAlertEvent.InputTuple,
      PriceDeviationAlertEvent.OutputTuple,
      PriceDeviationAlertEvent.OutputObject
    >;
    PriceDeviationAlert: TypedContractEvent<
      PriceDeviationAlertEvent.InputTuple,
      PriceDeviationAlertEvent.OutputTuple,
      PriceDeviationAlertEvent.OutputObject
    >;

    "PriceRequested(bytes32,uint256,uint8)": TypedContractEvent<
      PriceRequestedEvent.InputTuple,
      PriceRequestedEvent.OutputTuple,
      PriceRequestedEvent.OutputObject
    >;
    PriceRequested: TypedContractEvent<
      PriceRequestedEvent.InputTuple,
      PriceRequestedEvent.OutputTuple,
      PriceRequestedEvent.OutputObject
    >;

    "PriceRetrieved(bytes32,uint256,uint256,uint8)": TypedContractEvent<
      PriceRetrievedEvent.InputTuple,
      PriceRetrievedEvent.OutputTuple,
      PriceRetrievedEvent.OutputObject
    >;
    PriceRetrieved: TypedContractEvent<
      PriceRetrievedEvent.InputTuple,
      PriceRetrievedEvent.OutputTuple,
      PriceRetrievedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
