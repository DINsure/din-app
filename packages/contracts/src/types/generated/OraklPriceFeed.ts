/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace OraklPriceFeed {
  export type PriceDataStruct = {
    price: BigNumberish;
    timestamp: BigNumberish;
    roundId: BigNumberish;
    valid: boolean;
  };

  export type PriceDataStructOutput = [
    price: bigint,
    timestamp: bigint,
    roundId: bigint,
    valid: boolean
  ] & { price: bigint; timestamp: bigint; roundId: bigint; valid: boolean };
}

export interface OraklPriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_STALENESS"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "activeFeedIds"
      | "addPriceFeed"
      | "deactivatePriceFeed"
      | "getActiveFeedSymbols"
      | "getLatestPrice"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isFeedSupported"
      | "pause"
      | "paused"
      | "priceDeviationThresholdBps"
      | "priceFeeds"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "symbolToFeedId"
      | "unpause"
      | "updatePriceFeed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Paused"
      | "PriceDeviationDetected"
      | "PriceFeedAdded"
      | "PriceFeedDeactivated"
      | "PriceFeedUpdated"
      | "PriceRetrieved"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StalePriceDetected"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_STALENESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeFeedIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPriceFeed",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivatePriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveFeedSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeedSupported",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceDeviationThresholdBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "symbolToFeedId",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [string, AddressLike, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_STALENESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeFeedIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivatePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveFeedSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFeedSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDeviationThresholdBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "symbolToFeedId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceDeviationDetectedEvent {
  export type InputTuple = [
    feedId: BytesLike,
    symbol: string,
    currentPrice: BigNumberish,
    previousPrice: BigNumberish,
    deviation: BigNumberish
  ];
  export type OutputTuple = [
    feedId: string,
    symbol: string,
    currentPrice: bigint,
    previousPrice: bigint,
    deviation: bigint
  ];
  export interface OutputObject {
    feedId: string;
    symbol: string;
    currentPrice: bigint;
    previousPrice: bigint;
    deviation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedAddedEvent {
  export type InputTuple = [
    feedId: BytesLike,
    symbol: string,
    feedProxyAddress: AddressLike,
    decimals: BigNumberish,
    heartbeat: BigNumberish
  ];
  export type OutputTuple = [
    feedId: string,
    symbol: string,
    feedProxyAddress: string,
    decimals: bigint,
    heartbeat: bigint
  ];
  export interface OutputObject {
    feedId: string;
    symbol: string;
    feedProxyAddress: string;
    decimals: bigint;
    heartbeat: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedDeactivatedEvent {
  export type InputTuple = [feedId: BytesLike, symbol: string];
  export type OutputTuple = [feedId: string, symbol: string];
  export interface OutputObject {
    feedId: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedUpdatedEvent {
  export type InputTuple = [
    feedId: BytesLike,
    oldFeedAddress: AddressLike,
    newFeedAddress: AddressLike,
    newHeartbeat: BigNumberish,
    newDecimals: BigNumberish,
    newDescription: string
  ];
  export type OutputTuple = [
    feedId: string,
    oldFeedAddress: string,
    newFeedAddress: string,
    newHeartbeat: bigint,
    newDecimals: bigint,
    newDescription: string
  ];
  export interface OutputObject {
    feedId: string;
    oldFeedAddress: string;
    newFeedAddress: string;
    newHeartbeat: bigint;
    newDecimals: bigint;
    newDescription: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceRetrievedEvent {
  export type InputTuple = [
    feedId: BytesLike,
    symbol: string,
    price: BigNumberish,
    timestamp: BigNumberish,
    roundId: BigNumberish
  ];
  export type OutputTuple = [
    feedId: string,
    symbol: string,
    price: bigint,
    timestamp: bigint,
    roundId: bigint
  ];
  export interface OutputObject {
    feedId: string;
    symbol: string;
    price: bigint;
    timestamp: bigint;
    roundId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StalePriceDetectedEvent {
  export type InputTuple = [
    feedId: BytesLike,
    symbol: string,
    lastUpdate: BigNumberish,
    staleness: BigNumberish
  ];
  export type OutputTuple = [
    feedId: string,
    symbol: string,
    lastUpdate: bigint,
    staleness: bigint
  ];
  export interface OutputObject {
    feedId: string;
    symbol: string;
    lastUpdate: bigint;
    staleness: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OraklPriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): OraklPriceFeed;
  waitForDeployment(): Promise<this>;

  interface: OraklPriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_STALENESS: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  activeFeedIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addPriceFeed: TypedContractMethod<
    [
      symbol: string,
      feedProxyAddress: AddressLike,
      heartbeatSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deactivatePriceFeed: TypedContractMethod<
    [symbol: string],
    [void],
    "nonpayable"
  >;

  getActiveFeedSymbols: TypedContractMethod<[], [string[]], "view">;

  getLatestPrice: TypedContractMethod<
    [symbol: string],
    [OraklPriceFeed.PriceDataStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isFeedSupported: TypedContractMethod<[symbol: string], [boolean], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  priceDeviationThresholdBps: TypedContractMethod<[], [bigint], "view">;

  priceFeeds: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, string, boolean] & {
        feedProxyAddress: string;
        decimals: bigint;
        heartbeatSeconds: bigint;
        description: string;
        active: boolean;
      }
    ],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbolToFeedId: TypedContractMethod<[arg0: string], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePriceFeed: TypedContractMethod<
    [
      symbol: string,
      newFeedAddress: AddressLike,
      newHeartbeat: BigNumberish,
      newDescription: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_STALENESS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeFeedIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addPriceFeed"
  ): TypedContractMethod<
    [
      symbol: string,
      feedProxyAddress: AddressLike,
      heartbeatSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivatePriceFeed"
  ): TypedContractMethod<[symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveFeedSymbols"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getLatestPrice"
  ): TypedContractMethod<
    [symbol: string],
    [OraklPriceFeed.PriceDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFeedSupported"
  ): TypedContractMethod<[symbol: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "priceDeviationThresholdBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, string, boolean] & {
        feedProxyAddress: string;
        decimals: bigint;
        heartbeatSeconds: bigint;
        description: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbolToFeedId"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceFeed"
  ): TypedContractMethod<
    [
      symbol: string,
      newFeedAddress: AddressLike,
      newHeartbeat: BigNumberish,
      newDescription: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceDeviationDetected"
  ): TypedContractEvent<
    PriceDeviationDetectedEvent.InputTuple,
    PriceDeviationDetectedEvent.OutputTuple,
    PriceDeviationDetectedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedAdded"
  ): TypedContractEvent<
    PriceFeedAddedEvent.InputTuple,
    PriceFeedAddedEvent.OutputTuple,
    PriceFeedAddedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedDeactivated"
  ): TypedContractEvent<
    PriceFeedDeactivatedEvent.InputTuple,
    PriceFeedDeactivatedEvent.OutputTuple,
    PriceFeedDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedUpdated"
  ): TypedContractEvent<
    PriceFeedUpdatedEvent.InputTuple,
    PriceFeedUpdatedEvent.OutputTuple,
    PriceFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceRetrieved"
  ): TypedContractEvent<
    PriceRetrievedEvent.InputTuple,
    PriceRetrievedEvent.OutputTuple,
    PriceRetrievedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StalePriceDetected"
  ): TypedContractEvent<
    StalePriceDetectedEvent.InputTuple,
    StalePriceDetectedEvent.OutputTuple,
    StalePriceDetectedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceDeviationDetected(bytes32,string,uint256,uint256,uint256)": TypedContractEvent<
      PriceDeviationDetectedEvent.InputTuple,
      PriceDeviationDetectedEvent.OutputTuple,
      PriceDeviationDetectedEvent.OutputObject
    >;
    PriceDeviationDetected: TypedContractEvent<
      PriceDeviationDetectedEvent.InputTuple,
      PriceDeviationDetectedEvent.OutputTuple,
      PriceDeviationDetectedEvent.OutputObject
    >;

    "PriceFeedAdded(bytes32,string,address,uint8,uint32)": TypedContractEvent<
      PriceFeedAddedEvent.InputTuple,
      PriceFeedAddedEvent.OutputTuple,
      PriceFeedAddedEvent.OutputObject
    >;
    PriceFeedAdded: TypedContractEvent<
      PriceFeedAddedEvent.InputTuple,
      PriceFeedAddedEvent.OutputTuple,
      PriceFeedAddedEvent.OutputObject
    >;

    "PriceFeedDeactivated(bytes32,string)": TypedContractEvent<
      PriceFeedDeactivatedEvent.InputTuple,
      PriceFeedDeactivatedEvent.OutputTuple,
      PriceFeedDeactivatedEvent.OutputObject
    >;
    PriceFeedDeactivated: TypedContractEvent<
      PriceFeedDeactivatedEvent.InputTuple,
      PriceFeedDeactivatedEvent.OutputTuple,
      PriceFeedDeactivatedEvent.OutputObject
    >;

    "PriceFeedUpdated(bytes32,address,address,uint32,uint8,string)": TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;
    PriceFeedUpdated: TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;

    "PriceRetrieved(bytes32,string,uint256,uint256,uint80)": TypedContractEvent<
      PriceRetrievedEvent.InputTuple,
      PriceRetrievedEvent.OutputTuple,
      PriceRetrievedEvent.OutputObject
    >;
    PriceRetrieved: TypedContractEvent<
      PriceRetrievedEvent.InputTuple,
      PriceRetrievedEvent.OutputTuple,
      PriceRetrievedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StalePriceDetected(bytes32,string,uint256,uint256)": TypedContractEvent<
      StalePriceDetectedEvent.InputTuple,
      StalePriceDetectedEvent.OutputTuple,
      StalePriceDetectedEvent.OutputObject
    >;
    StalePriceDetected: TypedContractEvent<
      StalePriceDetectedEvent.InputTuple,
      StalePriceDetectedEvent.OutputTuple,
      StalePriceDetectedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
