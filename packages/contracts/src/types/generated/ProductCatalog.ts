/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ProductCatalog {
  export type TrancheParamsStruct = {
    productId: BigNumberish;
    triggerType: BigNumberish;
    threshold: BigNumberish;
    maturityTimestamp: BigNumberish;
    premiumRateBps: BigNumberish;
    perAccountMin: BigNumberish;
    perAccountMax: BigNumberish;
    trancheCap: BigNumberish;
    oracleRouteId: BigNumberish;
  };

  export type TrancheParamsStructOutput = [
    productId: bigint,
    triggerType: bigint,
    threshold: bigint,
    maturityTimestamp: bigint,
    premiumRateBps: bigint,
    perAccountMin: bigint,
    perAccountMax: bigint,
    trancheCap: bigint,
    oracleRouteId: bigint
  ] & {
    productId: bigint;
    triggerType: bigint;
    threshold: bigint;
    maturityTimestamp: bigint;
    premiumRateBps: bigint;
    perAccountMin: bigint;
    perAccountMax: bigint;
    trancheCap: bigint;
    oracleRouteId: bigint;
  };

  export type ProductStruct = {
    productId: BigNumberish;
    metadataHash: BytesLike;
    active: boolean;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    trancheIds: BigNumberish[];
  };

  export type ProductStructOutput = [
    productId: bigint,
    metadataHash: string,
    active: boolean,
    createdAt: bigint,
    updatedAt: bigint,
    trancheIds: bigint[]
  ] & {
    productId: bigint;
    metadataHash: string;
    active: boolean;
    createdAt: bigint;
    updatedAt: bigint;
    trancheIds: bigint[];
  };

  export type RoundStruct = {
    roundId: BigNumberish;
    trancheId: BigNumberish;
    salesStartTime: BigNumberish;
    salesEndTime: BigNumberish;
    state: BigNumberish;
    totalBuyerPurchases: BigNumberish;
    totalSellerCollateral: BigNumberish;
    matchedAmount: BigNumberish;
    createdAt: BigNumberish;
    stateChangedAt: BigNumberish;
  };

  export type RoundStructOutput = [
    roundId: bigint,
    trancheId: bigint,
    salesStartTime: bigint,
    salesEndTime: bigint,
    state: bigint,
    totalBuyerPurchases: bigint,
    totalSellerCollateral: bigint,
    matchedAmount: bigint,
    createdAt: bigint,
    stateChangedAt: bigint
  ] & {
    roundId: bigint;
    trancheId: bigint;
    salesStartTime: bigint;
    salesEndTime: bigint;
    state: bigint;
    totalBuyerPurchases: bigint;
    totalSellerCollateral: bigint;
    matchedAmount: bigint;
    createdAt: bigint;
    stateChangedAt: bigint;
  };

  export type TrancheSpecStruct = {
    trancheId: BigNumberish;
    productId: BigNumberish;
    triggerType: BigNumberish;
    threshold: BigNumberish;
    maturityTimestamp: BigNumberish;
    premiumRateBps: BigNumberish;
    perAccountMin: BigNumberish;
    perAccountMax: BigNumberish;
    trancheCap: BigNumberish;
    oracleRouteId: BigNumberish;
    active: boolean;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    roundIds: BigNumberish[];
  };

  export type TrancheSpecStructOutput = [
    trancheId: bigint,
    productId: bigint,
    triggerType: bigint,
    threshold: bigint,
    maturityTimestamp: bigint,
    premiumRateBps: bigint,
    perAccountMin: bigint,
    perAccountMax: bigint,
    trancheCap: bigint,
    oracleRouteId: bigint,
    active: boolean,
    createdAt: bigint,
    updatedAt: bigint,
    roundIds: bigint[]
  ] & {
    trancheId: bigint;
    productId: bigint;
    triggerType: bigint;
    threshold: bigint;
    maturityTimestamp: bigint;
    premiumRateBps: bigint;
    perAccountMin: bigint;
    perAccountMax: bigint;
    trancheCap: bigint;
    oracleRouteId: bigint;
    active: boolean;
    createdAt: bigint;
    updatedAt: bigint;
    roundIds: bigint[];
  };
}

export interface ProductCatalogInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ENGINE_ROLE"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "activeProductIds"
      | "activeTrancheIds"
      | "announceRound"
      | "calculatePremium"
      | "calculateUserPayout"
      | "closeAndMarkMatched"
      | "createProduct"
      | "createTranche"
      | "emergencyCancelRound"
      | "getActiveProducts"
      | "getActiveTranches"
      | "getProduct"
      | "getProductTranches"
      | "getRoleAdmin"
      | "getRound"
      | "getTranche"
      | "getTrancheRounds"
      | "grantRole"
      | "hasRole"
      | "nextProductId"
      | "nextRoundId"
      | "nextTrancheId"
      | "openRound"
      | "pause"
      | "paused"
      | "products"
      | "registry"
      | "renounceRole"
      | "revokeRole"
      | "rounds"
      | "setProductActive"
      | "setTrancheActive"
      | "supportsInterface"
      | "tranches"
      | "unpause"
      | "updateProduct"
      | "updateRoundState"
      | "updateRoundSubscription"
      | "updateTranche"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Paused"
      | "ProductActivated"
      | "ProductCreated"
      | "ProductDeactivated"
      | "ProductUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoundAnnounced"
      | "RoundClosed"
      | "RoundMatched"
      | "RoundOpened"
      | "RoundStateChanged"
      | "RoundSubscriptionUpdated"
      | "TrancheActivated"
      | "TrancheCreated"
      | "TrancheDeactivated"
      | "TrancheUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENGINE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeProductIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeTrancheIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "announceRound",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePremium",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUserPayout",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAndMarkMatched",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProduct",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTranche",
    values: [ProductCatalog.TrancheParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCancelRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTranches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductTranches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranche",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrancheRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextProductId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTrancheId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrancheActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tranches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoundState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoundSubscription",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTranche",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENGINE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeProductIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeTrancheIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUserPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAndMarkMatched",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCancelRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductTranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTranche", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrancheRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextProductId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTrancheId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProductActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrancheActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tranches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoundState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoundSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTranche",
    data: BytesLike
  ): Result;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductActivatedEvent {
  export type InputTuple = [productId: BigNumberish];
  export type OutputTuple = [productId: bigint];
  export interface OutputObject {
    productId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductCreatedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    metadataHash: BytesLike,
    creator: AddressLike
  ];
  export type OutputTuple = [
    productId: bigint,
    metadataHash: string,
    creator: string
  ];
  export interface OutputObject {
    productId: bigint;
    metadataHash: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductDeactivatedEvent {
  export type InputTuple = [productId: BigNumberish];
  export type OutputTuple = [productId: bigint];
  export interface OutputObject {
    productId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductUpdatedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    metadataHash: BytesLike,
    updater: AddressLike
  ];
  export type OutputTuple = [
    productId: bigint,
    metadataHash: string,
    updater: string
  ];
  export interface OutputObject {
    productId: bigint;
    metadataHash: string;
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundAnnouncedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    trancheId: BigNumberish,
    salesStartTime: BigNumberish,
    salesEndTime: BigNumberish,
    announcer: AddressLike
  ];
  export type OutputTuple = [
    roundId: bigint,
    trancheId: bigint,
    salesStartTime: bigint,
    salesEndTime: bigint,
    announcer: string
  ];
  export interface OutputObject {
    roundId: bigint;
    trancheId: bigint;
    salesStartTime: bigint;
    salesEndTime: bigint;
    announcer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundClosedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    trancheId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    trancheId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    trancheId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundMatchedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    trancheId: BigNumberish,
    matchedAmount: BigNumberish,
    totalBuyerPurchases: BigNumberish,
    totalSellerCollateral: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    trancheId: bigint,
    matchedAmount: bigint,
    totalBuyerPurchases: bigint,
    totalSellerCollateral: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    trancheId: bigint;
    matchedAmount: bigint;
    totalBuyerPurchases: bigint;
    totalSellerCollateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundOpenedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    trancheId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    trancheId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    trancheId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundStateChangedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    oldState: BigNumberish,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    oldState: bigint,
    newState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    oldState: bigint;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundSubscriptionUpdatedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    totalBuyerPurchases: BigNumberish,
    totalSellerCollateral: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    totalBuyerPurchases: bigint,
    totalSellerCollateral: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    totalBuyerPurchases: bigint;
    totalSellerCollateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrancheActivatedEvent {
  export type InputTuple = [trancheId: BigNumberish];
  export type OutputTuple = [trancheId: bigint];
  export interface OutputObject {
    trancheId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrancheCreatedEvent {
  export type InputTuple = [
    trancheId: BigNumberish,
    productId: BigNumberish,
    triggerType: BigNumberish,
    threshold: BigNumberish,
    maturityTimestamp: BigNumberish,
    creator: AddressLike
  ];
  export type OutputTuple = [
    trancheId: bigint,
    productId: bigint,
    triggerType: bigint,
    threshold: bigint,
    maturityTimestamp: bigint,
    creator: string
  ];
  export interface OutputObject {
    trancheId: bigint;
    productId: bigint;
    triggerType: bigint;
    threshold: bigint;
    maturityTimestamp: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrancheDeactivatedEvent {
  export type InputTuple = [trancheId: BigNumberish];
  export type OutputTuple = [trancheId: bigint];
  export interface OutputObject {
    trancheId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrancheUpdatedEvent {
  export type InputTuple = [trancheId: BigNumberish, updater: AddressLike];
  export type OutputTuple = [trancheId: bigint, updater: string];
  export interface OutputObject {
    trancheId: bigint;
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProductCatalog extends BaseContract {
  connect(runner?: ContractRunner | null): ProductCatalog;
  waitForDeployment(): Promise<this>;

  interface: ProductCatalogInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ENGINE_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  activeProductIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  activeTrancheIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  announceRound: TypedContractMethod<
    [
      trancheId: BigNumberish,
      salesStartTime: BigNumberish,
      salesEndTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  calculatePremium: TypedContractMethod<
    [trancheId: BigNumberish, purchaseAmount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateUserPayout: TypedContractMethod<
    [roundId: BigNumberish, userPurchaseAmount: BigNumberish],
    [bigint],
    "view"
  >;

  closeAndMarkMatched: TypedContractMethod<
    [roundId: BigNumberish, matchedAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProduct: TypedContractMethod<
    [metadataHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  createTranche: TypedContractMethod<
    [params: ProductCatalog.TrancheParamsStruct],
    [bigint],
    "nonpayable"
  >;

  emergencyCancelRound: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveProducts: TypedContractMethod<[], [bigint[]], "view">;

  getActiveTranches: TypedContractMethod<[], [bigint[]], "view">;

  getProduct: TypedContractMethod<
    [productId: BigNumberish],
    [ProductCatalog.ProductStructOutput],
    "view"
  >;

  getProductTranches: TypedContractMethod<
    [productId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRound: TypedContractMethod<
    [roundId: BigNumberish],
    [ProductCatalog.RoundStructOutput],
    "view"
  >;

  getTranche: TypedContractMethod<
    [trancheId: BigNumberish],
    [ProductCatalog.TrancheSpecStructOutput],
    "view"
  >;

  getTrancheRounds: TypedContractMethod<
    [trancheId: BigNumberish],
    [bigint[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  nextProductId: TypedContractMethod<[], [bigint], "view">;

  nextRoundId: TypedContractMethod<[], [bigint], "view">;

  nextTrancheId: TypedContractMethod<[], [bigint], "view">;

  openRound: TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint, bigint] & {
        productId: bigint;
        metadataHash: string;
        active: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        roundId: bigint;
        trancheId: bigint;
        salesStartTime: bigint;
        salesEndTime: bigint;
        state: bigint;
        totalBuyerPurchases: bigint;
        totalSellerCollateral: bigint;
        matchedAmount: bigint;
        createdAt: bigint;
        stateChangedAt: bigint;
      }
    ],
    "view"
  >;

  setProductActive: TypedContractMethod<
    [productId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;

  setTrancheActive: TypedContractMethod<
    [trancheId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tranches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        trancheId: bigint;
        productId: bigint;
        triggerType: bigint;
        threshold: bigint;
        maturityTimestamp: bigint;
        premiumRateBps: bigint;
        perAccountMin: bigint;
        perAccountMax: bigint;
        trancheCap: bigint;
        oracleRouteId: bigint;
        active: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateProduct: TypedContractMethod<
    [productId: BigNumberish, metadataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  updateRoundState: TypedContractMethod<
    [roundId: BigNumberish, newState: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRoundSubscription: TypedContractMethod<
    [
      roundId: BigNumberish,
      totalBuyerPurchases: BigNumberish,
      totalSellerCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateTranche: TypedContractMethod<
    [
      trancheId: BigNumberish,
      premiumRateBps: BigNumberish,
      perAccountMin: BigNumberish,
      perAccountMax: BigNumberish,
      trancheCap: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ENGINE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeProductIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeTrancheIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "announceRound"
  ): TypedContractMethod<
    [
      trancheId: BigNumberish,
      salesStartTime: BigNumberish,
      salesEndTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculatePremium"
  ): TypedContractMethod<
    [trancheId: BigNumberish, purchaseAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateUserPayout"
  ): TypedContractMethod<
    [roundId: BigNumberish, userPurchaseAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "closeAndMarkMatched"
  ): TypedContractMethod<
    [roundId: BigNumberish, matchedAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProduct"
  ): TypedContractMethod<[metadataHash: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "createTranche"
  ): TypedContractMethod<
    [params: ProductCatalog.TrancheParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyCancelRound"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveProducts"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getActiveTranches"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [ProductCatalog.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductTranches"
  ): TypedContractMethod<[productId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [ProductCatalog.RoundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTranche"
  ): TypedContractMethod<
    [trancheId: BigNumberish],
    [ProductCatalog.TrancheSpecStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrancheRounds"
  ): TypedContractMethod<[trancheId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextProductId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextRoundId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTrancheId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openRound"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint, bigint] & {
        productId: bigint;
        metadataHash: string;
        active: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        roundId: bigint;
        trancheId: bigint;
        salesStartTime: bigint;
        salesEndTime: bigint;
        state: bigint;
        totalBuyerPurchases: bigint;
        totalSellerCollateral: bigint;
        matchedAmount: bigint;
        createdAt: bigint;
        stateChangedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setProductActive"
  ): TypedContractMethod<
    [productId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrancheActive"
  ): TypedContractMethod<
    [trancheId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tranches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        trancheId: bigint;
        productId: bigint;
        triggerType: bigint;
        threshold: bigint;
        maturityTimestamp: bigint;
        premiumRateBps: bigint;
        perAccountMin: bigint;
        perAccountMax: bigint;
        trancheCap: bigint;
        oracleRouteId: bigint;
        active: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProduct"
  ): TypedContractMethod<
    [productId: BigNumberish, metadataHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRoundState"
  ): TypedContractMethod<
    [roundId: BigNumberish, newState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRoundSubscription"
  ): TypedContractMethod<
    [
      roundId: BigNumberish,
      totalBuyerPurchases: BigNumberish,
      totalSellerCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTranche"
  ): TypedContractMethod<
    [
      trancheId: BigNumberish,
      premiumRateBps: BigNumberish,
      perAccountMin: BigNumberish,
      perAccountMax: BigNumberish,
      trancheCap: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProductActivated"
  ): TypedContractEvent<
    ProductActivatedEvent.InputTuple,
    ProductActivatedEvent.OutputTuple,
    ProductActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductCreated"
  ): TypedContractEvent<
    ProductCreatedEvent.InputTuple,
    ProductCreatedEvent.OutputTuple,
    ProductCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductDeactivated"
  ): TypedContractEvent<
    ProductDeactivatedEvent.InputTuple,
    ProductDeactivatedEvent.OutputTuple,
    ProductDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductUpdated"
  ): TypedContractEvent<
    ProductUpdatedEvent.InputTuple,
    ProductUpdatedEvent.OutputTuple,
    ProductUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoundAnnounced"
  ): TypedContractEvent<
    RoundAnnouncedEvent.InputTuple,
    RoundAnnouncedEvent.OutputTuple,
    RoundAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "RoundClosed"
  ): TypedContractEvent<
    RoundClosedEvent.InputTuple,
    RoundClosedEvent.OutputTuple,
    RoundClosedEvent.OutputObject
  >;
  getEvent(
    key: "RoundMatched"
  ): TypedContractEvent<
    RoundMatchedEvent.InputTuple,
    RoundMatchedEvent.OutputTuple,
    RoundMatchedEvent.OutputObject
  >;
  getEvent(
    key: "RoundOpened"
  ): TypedContractEvent<
    RoundOpenedEvent.InputTuple,
    RoundOpenedEvent.OutputTuple,
    RoundOpenedEvent.OutputObject
  >;
  getEvent(
    key: "RoundStateChanged"
  ): TypedContractEvent<
    RoundStateChangedEvent.InputTuple,
    RoundStateChangedEvent.OutputTuple,
    RoundStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoundSubscriptionUpdated"
  ): TypedContractEvent<
    RoundSubscriptionUpdatedEvent.InputTuple,
    RoundSubscriptionUpdatedEvent.OutputTuple,
    RoundSubscriptionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TrancheActivated"
  ): TypedContractEvent<
    TrancheActivatedEvent.InputTuple,
    TrancheActivatedEvent.OutputTuple,
    TrancheActivatedEvent.OutputObject
  >;
  getEvent(
    key: "TrancheCreated"
  ): TypedContractEvent<
    TrancheCreatedEvent.InputTuple,
    TrancheCreatedEvent.OutputTuple,
    TrancheCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TrancheDeactivated"
  ): TypedContractEvent<
    TrancheDeactivatedEvent.InputTuple,
    TrancheDeactivatedEvent.OutputTuple,
    TrancheDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "TrancheUpdated"
  ): TypedContractEvent<
    TrancheUpdatedEvent.InputTuple,
    TrancheUpdatedEvent.OutputTuple,
    TrancheUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProductActivated(uint256)": TypedContractEvent<
      ProductActivatedEvent.InputTuple,
      ProductActivatedEvent.OutputTuple,
      ProductActivatedEvent.OutputObject
    >;
    ProductActivated: TypedContractEvent<
      ProductActivatedEvent.InputTuple,
      ProductActivatedEvent.OutputTuple,
      ProductActivatedEvent.OutputObject
    >;

    "ProductCreated(uint256,bytes32,address)": TypedContractEvent<
      ProductCreatedEvent.InputTuple,
      ProductCreatedEvent.OutputTuple,
      ProductCreatedEvent.OutputObject
    >;
    ProductCreated: TypedContractEvent<
      ProductCreatedEvent.InputTuple,
      ProductCreatedEvent.OutputTuple,
      ProductCreatedEvent.OutputObject
    >;

    "ProductDeactivated(uint256)": TypedContractEvent<
      ProductDeactivatedEvent.InputTuple,
      ProductDeactivatedEvent.OutputTuple,
      ProductDeactivatedEvent.OutputObject
    >;
    ProductDeactivated: TypedContractEvent<
      ProductDeactivatedEvent.InputTuple,
      ProductDeactivatedEvent.OutputTuple,
      ProductDeactivatedEvent.OutputObject
    >;

    "ProductUpdated(uint256,bytes32,address)": TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
    ProductUpdated: TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoundAnnounced(uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      RoundAnnouncedEvent.InputTuple,
      RoundAnnouncedEvent.OutputTuple,
      RoundAnnouncedEvent.OutputObject
    >;
    RoundAnnounced: TypedContractEvent<
      RoundAnnouncedEvent.InputTuple,
      RoundAnnouncedEvent.OutputTuple,
      RoundAnnouncedEvent.OutputObject
    >;

    "RoundClosed(uint256,uint256,uint256)": TypedContractEvent<
      RoundClosedEvent.InputTuple,
      RoundClosedEvent.OutputTuple,
      RoundClosedEvent.OutputObject
    >;
    RoundClosed: TypedContractEvent<
      RoundClosedEvent.InputTuple,
      RoundClosedEvent.OutputTuple,
      RoundClosedEvent.OutputObject
    >;

    "RoundMatched(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RoundMatchedEvent.InputTuple,
      RoundMatchedEvent.OutputTuple,
      RoundMatchedEvent.OutputObject
    >;
    RoundMatched: TypedContractEvent<
      RoundMatchedEvent.InputTuple,
      RoundMatchedEvent.OutputTuple,
      RoundMatchedEvent.OutputObject
    >;

    "RoundOpened(uint256,uint256,uint256)": TypedContractEvent<
      RoundOpenedEvent.InputTuple,
      RoundOpenedEvent.OutputTuple,
      RoundOpenedEvent.OutputObject
    >;
    RoundOpened: TypedContractEvent<
      RoundOpenedEvent.InputTuple,
      RoundOpenedEvent.OutputTuple,
      RoundOpenedEvent.OutputObject
    >;

    "RoundStateChanged(uint256,uint8,uint8,uint256)": TypedContractEvent<
      RoundStateChangedEvent.InputTuple,
      RoundStateChangedEvent.OutputTuple,
      RoundStateChangedEvent.OutputObject
    >;
    RoundStateChanged: TypedContractEvent<
      RoundStateChangedEvent.InputTuple,
      RoundStateChangedEvent.OutputTuple,
      RoundStateChangedEvent.OutputObject
    >;

    "RoundSubscriptionUpdated(uint256,uint256,uint256)": TypedContractEvent<
      RoundSubscriptionUpdatedEvent.InputTuple,
      RoundSubscriptionUpdatedEvent.OutputTuple,
      RoundSubscriptionUpdatedEvent.OutputObject
    >;
    RoundSubscriptionUpdated: TypedContractEvent<
      RoundSubscriptionUpdatedEvent.InputTuple,
      RoundSubscriptionUpdatedEvent.OutputTuple,
      RoundSubscriptionUpdatedEvent.OutputObject
    >;

    "TrancheActivated(uint256)": TypedContractEvent<
      TrancheActivatedEvent.InputTuple,
      TrancheActivatedEvent.OutputTuple,
      TrancheActivatedEvent.OutputObject
    >;
    TrancheActivated: TypedContractEvent<
      TrancheActivatedEvent.InputTuple,
      TrancheActivatedEvent.OutputTuple,
      TrancheActivatedEvent.OutputObject
    >;

    "TrancheCreated(uint256,uint256,uint8,uint256,uint256,address)": TypedContractEvent<
      TrancheCreatedEvent.InputTuple,
      TrancheCreatedEvent.OutputTuple,
      TrancheCreatedEvent.OutputObject
    >;
    TrancheCreated: TypedContractEvent<
      TrancheCreatedEvent.InputTuple,
      TrancheCreatedEvent.OutputTuple,
      TrancheCreatedEvent.OutputObject
    >;

    "TrancheDeactivated(uint256)": TypedContractEvent<
      TrancheDeactivatedEvent.InputTuple,
      TrancheDeactivatedEvent.OutputTuple,
      TrancheDeactivatedEvent.OutputObject
    >;
    TrancheDeactivated: TypedContractEvent<
      TrancheDeactivatedEvent.InputTuple,
      TrancheDeactivatedEvent.OutputTuple,
      TrancheDeactivatedEvent.OutputObject
    >;

    "TrancheUpdated(uint256,address)": TypedContractEvent<
      TrancheUpdatedEvent.InputTuple,
      TrancheUpdatedEvent.OutputTuple,
      TrancheUpdatedEvent.OutputObject
    >;
    TrancheUpdated: TypedContractEvent<
      TrancheUpdatedEvent.InputTuple,
      TrancheUpdatedEvent.OutputTuple,
      TrancheUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
