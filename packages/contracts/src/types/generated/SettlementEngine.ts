/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SettlementEngine {
  export type OracleRouteStruct = {
    primaryOracle: AddressLike;
    fallbackOracles: AddressLike[];
    heartbeatThreshold: BigNumberish;
    decimals: BigNumberish;
    active: boolean;
  };

  export type OracleRouteStructOutput = [
    primaryOracle: string,
    fallbackOracles: string[],
    heartbeatThreshold: bigint,
    decimals: bigint,
    active: boolean
  ] & {
    primaryOracle: string;
    fallbackOracles: string[];
    heartbeatThreshold: bigint;
    decimals: bigint;
    active: boolean;
  };

  export type SettlementInfoStruct = {
    roundId: BigNumberish;
    tranchePool: AddressLike;
    trancheId: BigNumberish;
    oracleStatus: BigNumberish;
    observationTimestamp: BigNumberish;
    oracleResult: BigNumberish;
    triggered: boolean;
    settled: boolean;
    totalPayouts: BigNumberish;
    livenessDeadline: BigNumberish;
    resolver: AddressLike;
  };

  export type SettlementInfoStructOutput = [
    roundId: bigint,
    tranchePool: string,
    trancheId: bigint,
    oracleStatus: bigint,
    observationTimestamp: bigint,
    oracleResult: bigint,
    triggered: boolean,
    settled: boolean,
    totalPayouts: bigint,
    livenessDeadline: bigint,
    resolver: string
  ] & {
    roundId: bigint;
    tranchePool: string;
    trancheId: bigint;
    oracleStatus: bigint;
    observationTimestamp: bigint;
    oracleResult: bigint;
    triggered: boolean;
    settled: boolean;
    totalPayouts: bigint;
    livenessDeadline: bigint;
    resolver: string;
  };
}

export interface SettlementEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "KEEPER_ROLE"
      | "ORACLE_ROLE"
      | "PAUSER_ROLE"
      | "canFinalize"
      | "configureOracleRoute"
      | "disputeOracleResult"
      | "disputeWindow"
      | "finalizeSettlement"
      | "getOracleRoute"
      | "getRoleAdmin"
      | "getSettlementInfo"
      | "grantRole"
      | "hasRole"
      | "livenessWindow"
      | "oracleRouter"
      | "oracleRoutes"
      | "pause"
      | "paused"
      | "registry"
      | "renounceRole"
      | "requestOracleObservation"
      | "resolveDispute"
      | "revokeRole"
      | "setDisputeWindow"
      | "setLivenessWindow"
      | "settlements"
      | "submitOracleResult"
      | "supportsInterface"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyerPaid"
      | "CollateralReleased"
      | "OracleObservationRequested"
      | "OracleResultReceived"
      | "OracleRouteConfigured"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SettlementDisputed"
      | "SettlementFinalized"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canFinalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureOracleRoute",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeOracleResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeSettlement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleRoute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "livenessWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRoutes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestOracleObservation",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLivenessWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOracleResult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFinalize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureOracleRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeOracleResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "livenessWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOracleObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLivenessWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOracleResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BuyerPaidEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    buyer: AddressLike,
    payout: BigNumberish
  ];
  export type OutputTuple = [roundId: bigint, buyer: string, payout: bigint];
  export interface OutputObject {
    roundId: bigint;
    buyer: string;
    payout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralReleasedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [roundId: bigint, seller: string, amount: bigint];
  export interface OutputObject {
    roundId: bigint;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleObservationRequestedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    trancheId: BigNumberish,
    oracleRouteId: BigNumberish,
    tranchePool: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    trancheId: bigint,
    oracleRouteId: bigint,
    tranchePool: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    trancheId: bigint;
    oracleRouteId: bigint;
    tranchePool: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleResultReceivedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    result: BigNumberish,
    timestamp: BigNumberish,
    oracle: AddressLike,
    triggered: boolean
  ];
  export type OutputTuple = [
    roundId: bigint,
    result: bigint,
    timestamp: bigint,
    oracle: string,
    triggered: boolean
  ];
  export interface OutputObject {
    roundId: bigint;
    result: bigint;
    timestamp: bigint;
    oracle: string;
    triggered: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRouteConfiguredEvent {
  export type InputTuple = [
    routeId: BigNumberish,
    primaryOracle: AddressLike,
    decimals: BigNumberish
  ];
  export type OutputTuple = [
    routeId: bigint,
    primaryOracle: string,
    decimals: bigint
  ];
  export interface OutputObject {
    routeId: bigint;
    primaryOracle: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementDisputedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    disputer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    disputer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    disputer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementFinalizedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    trancheId: BigNumberish,
    triggered: boolean,
    totalPayouts: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    trancheId: bigint,
    triggered: boolean,
    totalPayouts: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    trancheId: bigint;
    triggered: boolean;
    totalPayouts: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SettlementEngine extends BaseContract {
  connect(runner?: ContractRunner | null): SettlementEngine;
  waitForDeployment(): Promise<this>;

  interface: SettlementEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  KEEPER_ROLE: TypedContractMethod<[], [string], "view">;

  ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  canFinalize: TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;

  configureOracleRoute: TypedContractMethod<
    [
      routeId: BigNumberish,
      primaryOracle: AddressLike,
      fallbackOracles: AddressLike[],
      heartbeatThreshold: BigNumberish,
      decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  disputeOracleResult: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  disputeWindow: TypedContractMethod<[], [bigint], "view">;

  finalizeSettlement: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOracleRoute: TypedContractMethod<
    [routeId: BigNumberish],
    [SettlementEngine.OracleRouteStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSettlementInfo: TypedContractMethod<
    [roundId: BigNumberish],
    [SettlementEngine.SettlementInfoStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  livenessWindow: TypedContractMethod<[], [bigint], "view">;

  oracleRouter: TypedContractMethod<[], [string], "view">;

  oracleRoutes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        primaryOracle: string;
        heartbeatThreshold: bigint;
        decimals: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  requestOracleObservation: TypedContractMethod<
    [
      roundId: BigNumberish,
      tranchePool: AddressLike,
      priceIdentifier: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [roundId: BigNumberish, newResult: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDisputeWindow: TypedContractMethod<
    [newWindow: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLivenessWindow: TypedContractMethod<
    [newWindow: BigNumberish],
    [void],
    "nonpayable"
  >;

  settlements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        string
      ] & {
        roundId: bigint;
        tranchePool: string;
        trancheId: bigint;
        oracleStatus: bigint;
        observationTimestamp: bigint;
        oracleResult: bigint;
        triggered: boolean;
        settled: boolean;
        totalPayouts: bigint;
        livenessDeadline: bigint;
        resolver: string;
      }
    ],
    "view"
  >;

  submitOracleResult: TypedContractMethod<
    [roundId: BigNumberish, result: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "KEEPER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "canFinalize"
  ): TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "configureOracleRoute"
  ): TypedContractMethod<
    [
      routeId: BigNumberish,
      primaryOracle: AddressLike,
      fallbackOracles: AddressLike[],
      heartbeatThreshold: BigNumberish,
      decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disputeOracleResult"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disputeWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalizeSettlement"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOracleRoute"
  ): TypedContractMethod<
    [routeId: BigNumberish],
    [SettlementEngine.OracleRouteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSettlementInfo"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [SettlementEngine.SettlementInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "livenessWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracleRoutes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        primaryOracle: string;
        heartbeatThreshold: bigint;
        decimals: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestOracleObservation"
  ): TypedContractMethod<
    [
      roundId: BigNumberish,
      tranchePool: AddressLike,
      priceIdentifier: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [roundId: BigNumberish, newResult: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDisputeWindow"
  ): TypedContractMethod<[newWindow: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLivenessWindow"
  ): TypedContractMethod<[newWindow: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        string
      ] & {
        roundId: bigint;
        tranchePool: string;
        trancheId: bigint;
        oracleStatus: bigint;
        observationTimestamp: bigint;
        oracleResult: bigint;
        triggered: boolean;
        settled: boolean;
        totalPayouts: bigint;
        livenessDeadline: bigint;
        resolver: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitOracleResult"
  ): TypedContractMethod<
    [roundId: BigNumberish, result: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BuyerPaid"
  ): TypedContractEvent<
    BuyerPaidEvent.InputTuple,
    BuyerPaidEvent.OutputTuple,
    BuyerPaidEvent.OutputObject
  >;
  getEvent(
    key: "CollateralReleased"
  ): TypedContractEvent<
    CollateralReleasedEvent.InputTuple,
    CollateralReleasedEvent.OutputTuple,
    CollateralReleasedEvent.OutputObject
  >;
  getEvent(
    key: "OracleObservationRequested"
  ): TypedContractEvent<
    OracleObservationRequestedEvent.InputTuple,
    OracleObservationRequestedEvent.OutputTuple,
    OracleObservationRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OracleResultReceived"
  ): TypedContractEvent<
    OracleResultReceivedEvent.InputTuple,
    OracleResultReceivedEvent.OutputTuple,
    OracleResultReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OracleRouteConfigured"
  ): TypedContractEvent<
    OracleRouteConfiguredEvent.InputTuple,
    OracleRouteConfiguredEvent.OutputTuple,
    OracleRouteConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementDisputed"
  ): TypedContractEvent<
    SettlementDisputedEvent.InputTuple,
    SettlementDisputedEvent.OutputTuple,
    SettlementDisputedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementFinalized"
  ): TypedContractEvent<
    SettlementFinalizedEvent.InputTuple,
    SettlementFinalizedEvent.OutputTuple,
    SettlementFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BuyerPaid(uint256,address,uint256)": TypedContractEvent<
      BuyerPaidEvent.InputTuple,
      BuyerPaidEvent.OutputTuple,
      BuyerPaidEvent.OutputObject
    >;
    BuyerPaid: TypedContractEvent<
      BuyerPaidEvent.InputTuple,
      BuyerPaidEvent.OutputTuple,
      BuyerPaidEvent.OutputObject
    >;

    "CollateralReleased(uint256,address,uint256)": TypedContractEvent<
      CollateralReleasedEvent.InputTuple,
      CollateralReleasedEvent.OutputTuple,
      CollateralReleasedEvent.OutputObject
    >;
    CollateralReleased: TypedContractEvent<
      CollateralReleasedEvent.InputTuple,
      CollateralReleasedEvent.OutputTuple,
      CollateralReleasedEvent.OutputObject
    >;

    "OracleObservationRequested(uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      OracleObservationRequestedEvent.InputTuple,
      OracleObservationRequestedEvent.OutputTuple,
      OracleObservationRequestedEvent.OutputObject
    >;
    OracleObservationRequested: TypedContractEvent<
      OracleObservationRequestedEvent.InputTuple,
      OracleObservationRequestedEvent.OutputTuple,
      OracleObservationRequestedEvent.OutputObject
    >;

    "OracleResultReceived(uint256,uint256,uint256,address,bool)": TypedContractEvent<
      OracleResultReceivedEvent.InputTuple,
      OracleResultReceivedEvent.OutputTuple,
      OracleResultReceivedEvent.OutputObject
    >;
    OracleResultReceived: TypedContractEvent<
      OracleResultReceivedEvent.InputTuple,
      OracleResultReceivedEvent.OutputTuple,
      OracleResultReceivedEvent.OutputObject
    >;

    "OracleRouteConfigured(uint256,address,uint8)": TypedContractEvent<
      OracleRouteConfiguredEvent.InputTuple,
      OracleRouteConfiguredEvent.OutputTuple,
      OracleRouteConfiguredEvent.OutputObject
    >;
    OracleRouteConfigured: TypedContractEvent<
      OracleRouteConfiguredEvent.InputTuple,
      OracleRouteConfiguredEvent.OutputTuple,
      OracleRouteConfiguredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SettlementDisputed(uint256,address,uint256)": TypedContractEvent<
      SettlementDisputedEvent.InputTuple,
      SettlementDisputedEvent.OutputTuple,
      SettlementDisputedEvent.OutputObject
    >;
    SettlementDisputed: TypedContractEvent<
      SettlementDisputedEvent.InputTuple,
      SettlementDisputedEvent.OutputTuple,
      SettlementDisputedEvent.OutputObject
    >;

    "SettlementFinalized(uint256,uint256,bool,uint256,uint256)": TypedContractEvent<
      SettlementFinalizedEvent.InputTuple,
      SettlementFinalizedEvent.OutputTuple,
      SettlementFinalizedEvent.OutputObject
    >;
    SettlementFinalized: TypedContractEvent<
      SettlementFinalizedEvent.InputTuple,
      SettlementFinalizedEvent.OutputTuple,
      SettlementFinalizedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
