/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TestFaucetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COOLDOWN_SECONDS"
      | "DIN_AMOUNT"
      | "USDT_AMOUNT"
      | "claim"
      | "dinToken"
      | "lastClaimAt"
      | "usdtToken"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;

  encodeFunctionData(
    functionFragment: "COOLDOWN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "dinToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastClaimAt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "COOLDOWN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DIN_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "USDT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dinToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    account: AddressLike,
    dinAmount: BigNumberish,
    usdtAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    dinAmount: bigint,
    usdtAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    account: string;
    dinAmount: bigint;
    usdtAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestFaucet extends BaseContract {
  connect(runner?: ContractRunner | null): TestFaucet;
  waitForDeployment(): Promise<this>;

  interface: TestFaucetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COOLDOWN_SECONDS: TypedContractMethod<[], [bigint], "view">;

  DIN_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  USDT_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  dinToken: TypedContractMethod<[], [string], "view">;

  lastClaimAt: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  usdtToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COOLDOWN_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DIN_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDT_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dinToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastClaimAt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256,uint256,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
  };
}
