/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TranchePoolCore {
  export type TrancheInfoStruct = {
    trancheId: BigNumberish;
    productId: BigNumberish;
    productCatalog: AddressLike;
    active: boolean;
  };

  export type TrancheInfoStructOutput = [
    trancheId: bigint,
    productId: bigint,
    productCatalog: string,
    active: boolean
  ] & {
    trancheId: bigint;
    productId: bigint;
    productCatalog: string;
    active: boolean;
  };

  export type BuyerOrderStruct = {
    buyer: AddressLike;
    purchaseAmount: BigNumberish;
    premiumPaid: BigNumberish;
    insuranceTokenId: BigNumberish;
    filled: boolean;
    refunded: boolean;
    timestamp: BigNumberish;
  };

  export type BuyerOrderStructOutput = [
    buyer: string,
    purchaseAmount: bigint,
    premiumPaid: bigint,
    insuranceTokenId: bigint,
    filled: boolean,
    refunded: boolean,
    timestamp: bigint
  ] & {
    buyer: string;
    purchaseAmount: bigint;
    premiumPaid: bigint;
    insuranceTokenId: bigint;
    filled: boolean;
    refunded: boolean;
    timestamp: bigint;
  };

  export type PoolAccountingStruct = {
    totalAssets: BigNumberish;
    totalShares: BigNumberish;
    lockedAssets: BigNumberish;
    premiumReserve: BigNumberish;
    navPerShare: BigNumberish;
    lastUpdateTime: BigNumberish;
    yieldDeposited: BigNumberish;
    yieldEarned: BigNumberish;
  };

  export type PoolAccountingStructOutput = [
    totalAssets: bigint,
    totalShares: bigint,
    lockedAssets: bigint,
    premiumReserve: bigint,
    navPerShare: bigint,
    lastUpdateTime: bigint,
    yieldDeposited: bigint,
    yieldEarned: bigint
  ] & {
    totalAssets: bigint;
    totalShares: bigint;
    lockedAssets: bigint;
    premiumReserve: bigint;
    navPerShare: bigint;
    lastUpdateTime: bigint;
    yieldDeposited: bigint;
    yieldEarned: bigint;
  };

  export type SellerPositionStruct = {
    seller: AddressLike;
    collateralAmount: BigNumberish;
    sharesMinted: BigNumberish;
    premiumEarned: BigNumberish;
    filledCollateral: BigNumberish;
    lockedSharesAssigned: BigNumberish;
    filled: boolean;
    refunded: boolean;
    timestamp: BigNumberish;
  };

  export type SellerPositionStructOutput = [
    seller: string,
    collateralAmount: bigint,
    sharesMinted: bigint,
    premiumEarned: bigint,
    filledCollateral: bigint,
    lockedSharesAssigned: bigint,
    filled: boolean,
    refunded: boolean,
    timestamp: bigint
  ] & {
    seller: string;
    collateralAmount: bigint;
    sharesMinted: bigint;
    premiumEarned: bigint;
    filledCollateral: bigint;
    lockedSharesAssigned: bigint;
    filled: boolean;
    refunded: boolean;
    timestamp: bigint;
  };
}

export interface TranchePoolCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "KEEPER_ROLE"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "SETTLEMENT_ROLE"
      | "buyerOrders"
      | "calculatePremium"
      | "computeMatchAndDistribute"
      | "depositCollateral"
      | "depositFromYield"
      | "executeBuyerPayouts"
      | "feeTreasury"
      | "freezeRound"
      | "frozen"
      | "getAvailableCollateral"
      | "getAvailableForYield"
      | "getBuyerOrder"
      | "getPoolAccounting"
      | "getRoleAdmin"
      | "getRoundEconomics"
      | "getRoundParticipants"
      | "getSellerPosition"
      | "getTrancheInfo"
      | "getYieldInfo"
      | "grantRole"
      | "hasRole"
      | "insuranceToken"
      | "lockedShares"
      | "pause"
      | "paused"
      | "placeBuyerOrder"
      | "poolAccounting"
      | "protocolFeeBps"
      | "registry"
      | "releaseSellerCollateral"
      | "renounceRole"
      | "revokeRole"
      | "roundBuyers"
      | "roundSellers"
      | "sellerPositions"
      | "setFeeTreasury"
      | "setSettlementEngine"
      | "setYieldRouter"
      | "settlementEngine"
      | "shareBalances"
      | "supportsInterface"
      | "trancheInfo"
      | "unfreezeRound"
      | "unpause"
      | "updateProtocolFeeBps"
      | "usdtToken"
      | "withdrawForYield"
      | "yieldRouter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyerOrderPlaced"
      | "CollateralDeposited"
      | "CollateralReleased"
      | "FeeTreasuryUpdated"
      | "FundsMovedToYield"
      | "FundsReturnedFromYield"
      | "NAVUpdated"
      | "Paused"
      | "PremiumCalculated"
      | "PremiumDistributed"
      | "PremiumTransferred"
      | "ProtocolFeeUpdated"
      | "RefundProcessed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoundFrozen"
      | "RoundMatched"
      | "RoundUnfrozen"
      | "SellerPositionCreated"
      | "Unpaused"
      | "YieldRouterUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SETTLEMENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyerOrders",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeMatchAndDistribute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromYield",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBuyerPayouts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frozen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableForYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerOrder",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAccounting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundEconomics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrancheInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBuyerOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolAccounting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseSellerCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roundBuyers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundSellers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellerPositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementEngine",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setYieldRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shareBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trancheInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProtocolFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawForYield",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SETTLEMENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyerOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeMatchAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBuyerPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableForYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAccounting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundEconomics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrancheInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insuranceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeBuyerOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAccounting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseSellerCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundBuyers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundSellers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setYieldRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trancheInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldRouter",
    data: BytesLike
  ): Result;
}

export namespace BuyerOrderPlacedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    buyer: AddressLike,
    purchaseAmount: BigNumberish,
    premiumPaid: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    buyer: string,
    purchaseAmount: bigint,
    premiumPaid: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    buyer: string;
    purchaseAmount: bigint;
    premiumPaid: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositedEvent {
  export type InputTuple = [
    seller: AddressLike,
    amount: BigNumberish,
    sharesMinted: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    amount: bigint,
    sharesMinted: bigint
  ];
  export interface OutputObject {
    seller: string;
    amount: bigint;
    sharesMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralReleasedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [roundId: bigint, seller: string, amount: bigint];
  export interface OutputObject {
    roundId: bigint;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeTreasuryUpdatedEvent {
  export type InputTuple = [
    oldTreasury: AddressLike,
    newTreasury: AddressLike,
    admin: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldTreasury: string,
    newTreasury: string,
    admin: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldTreasury: string;
    newTreasury: string;
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsMovedToYieldEvent {
  export type InputTuple = [
    amount: BigNumberish,
    yieldRouter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    amount: bigint,
    yieldRouter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    amount: bigint;
    yieldRouter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReturnedFromYieldEvent {
  export type InputTuple = [
    returnedAmount: BigNumberish,
    yieldEarned: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    returnedAmount: bigint,
    yieldEarned: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    returnedAmount: bigint;
    yieldEarned: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NAVUpdatedEvent {
  export type InputTuple = [
    oldNavPerShare: BigNumberish,
    newNavPerShare: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldNavPerShare: bigint,
    newNavPerShare: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldNavPerShare: bigint;
    newNavPerShare: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumCalculatedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    buyer: AddressLike,
    purchaseAmount: BigNumberish,
    premium: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    buyer: string,
    purchaseAmount: bigint,
    premium: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    buyer: string;
    purchaseAmount: bigint;
    premium: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumDistributedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    sellerShare: BigNumberish,
    protocolFee: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    sellerShare: bigint,
    protocolFee: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    sellerShare: bigint;
    protocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumTransferredEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [roundId: bigint, seller: string, amount: bigint];
  export interface OutputObject {
    roundId: bigint;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeUpdatedEvent {
  export type InputTuple = [
    oldFeeBps: BigNumberish,
    newFeeBps: BigNumberish,
    admin: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldFeeBps: bigint,
    newFeeBps: bigint,
    admin: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldFeeBps: bigint;
    newFeeBps: bigint;
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundProcessedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish,
    isBuyer: boolean
  ];
  export type OutputTuple = [
    roundId: bigint,
    user: string,
    amount: bigint,
    isBuyer: boolean
  ];
  export interface OutputObject {
    roundId: bigint;
    user: string;
    amount: bigint;
    isBuyer: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundFrozenEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    admin: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [roundId: bigint, admin: string, timestamp: bigint];
  export interface OutputObject {
    roundId: bigint;
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundMatchedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    matchedAmount: BigNumberish,
    totalBuyers: BigNumberish,
    totalSellers: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    matchedAmount: bigint,
    totalBuyers: bigint,
    totalSellers: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    matchedAmount: bigint;
    totalBuyers: bigint;
    totalSellers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundUnfrozenEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    admin: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [roundId: bigint, admin: string, timestamp: bigint];
  export interface OutputObject {
    roundId: bigint;
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellerPositionCreatedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    seller: AddressLike,
    collateralAmount: BigNumberish,
    sharesMinted: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    seller: string,
    collateralAmount: bigint,
    sharesMinted: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    seller: string;
    collateralAmount: bigint;
    sharesMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldRouterUpdatedEvent {
  export type InputTuple = [
    oldRouter: AddressLike,
    newRouter: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [
    oldRouter: string,
    newRouter: string,
    admin: string
  ];
  export interface OutputObject {
    oldRouter: string;
    newRouter: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TranchePoolCore extends BaseContract {
  connect(runner?: ContractRunner | null): TranchePoolCore;
  waitForDeployment(): Promise<this>;

  interface: TranchePoolCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  KEEPER_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  SETTLEMENT_ROLE: TypedContractMethod<[], [string], "view">;

  buyerOrders: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, boolean, bigint] & {
        buyer: string;
        purchaseAmount: bigint;
        premiumPaid: bigint;
        insuranceTokenId: bigint;
        filled: boolean;
        refunded: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  calculatePremium: TypedContractMethod<
    [purchaseAmount: BigNumberish],
    [bigint],
    "view"
  >;

  computeMatchAndDistribute: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  depositCollateral: TypedContractMethod<
    [roundId: BigNumberish, collateralAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositFromYield: TypedContractMethod<
    [principalAmount: BigNumberish, yieldAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  executeBuyerPayouts: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  feeTreasury: TypedContractMethod<[], [string], "view">;

  freezeRound: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  frozen: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  getAvailableCollateral: TypedContractMethod<
    [seller: AddressLike],
    [bigint],
    "view"
  >;

  getAvailableForYield: TypedContractMethod<[], [bigint], "view">;

  getBuyerOrder: TypedContractMethod<
    [roundId: BigNumberish, buyer: AddressLike],
    [TranchePoolCore.BuyerOrderStructOutput],
    "view"
  >;

  getPoolAccounting: TypedContractMethod<
    [],
    [TranchePoolCore.PoolAccountingStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoundEconomics: TypedContractMethod<
    [roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalBuyerPurchases: bigint;
        totalSellerCollateral: bigint;
        matchedAmount: bigint;
        lockedCollateral: bigint;
        premiumPool: bigint;
        protocolFees: bigint;
      }
    ],
    "view"
  >;

  getRoundParticipants: TypedContractMethod<
    [roundId: BigNumberish],
    [[string[], string[]] & { buyers: string[]; sellers: string[] }],
    "view"
  >;

  getSellerPosition: TypedContractMethod<
    [roundId: BigNumberish, seller: AddressLike],
    [TranchePoolCore.SellerPositionStructOutput],
    "view"
  >;

  getTrancheInfo: TypedContractMethod<
    [],
    [TranchePoolCore.TrancheInfoStructOutput],
    "view"
  >;

  getYieldInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        yieldDeposited: bigint;
        yieldEarned: bigint;
        yieldRouterAddress: string;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  insuranceToken: TypedContractMethod<[], [string], "view">;

  lockedShares: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  placeBuyerOrder: TypedContractMethod<
    [roundId: BigNumberish, purchaseAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  poolAccounting: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalAssets: bigint;
        totalShares: bigint;
        lockedAssets: bigint;
        premiumReserve: bigint;
        navPerShare: bigint;
        lastUpdateTime: bigint;
        yieldDeposited: bigint;
        yieldEarned: bigint;
      }
    ],
    "view"
  >;

  protocolFeeBps: TypedContractMethod<[], [bigint], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  releaseSellerCollateral: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  roundBuyers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  roundSellers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  sellerPositions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        seller: string;
        collateralAmount: bigint;
        sharesMinted: bigint;
        premiumEarned: bigint;
        filledCollateral: bigint;
        lockedSharesAssigned: bigint;
        filled: boolean;
        refunded: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  setFeeTreasury: TypedContractMethod<
    [newFeeTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setSettlementEngine: TypedContractMethod<
    [_settlementEngine: AddressLike],
    [void],
    "nonpayable"
  >;

  setYieldRouter: TypedContractMethod<
    [newYieldRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  settlementEngine: TypedContractMethod<[], [string], "view">;

  shareBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  trancheInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, string, boolean] & {
        trancheId: bigint;
        productId: bigint;
        productCatalog: string;
        active: boolean;
      }
    ],
    "view"
  >;

  unfreezeRound: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateProtocolFeeBps: TypedContractMethod<
    [newFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdtToken: TypedContractMethod<[], [string], "view">;

  withdrawForYield: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  yieldRouter: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "KEEPER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SETTLEMENT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyerOrders"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, boolean, bigint] & {
        buyer: string;
        purchaseAmount: bigint;
        premiumPaid: bigint;
        insuranceTokenId: bigint;
        filled: boolean;
        refunded: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculatePremium"
  ): TypedContractMethod<[purchaseAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "computeMatchAndDistribute"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<
    [roundId: BigNumberish, collateralAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromYield"
  ): TypedContractMethod<
    [principalAmount: BigNumberish, yieldAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBuyerPayouts"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "feeTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freezeRound"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAvailableCollateral"
  ): TypedContractMethod<[seller: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAvailableForYield"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBuyerOrder"
  ): TypedContractMethod<
    [roundId: BigNumberish, buyer: AddressLike],
    [TranchePoolCore.BuyerOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAccounting"
  ): TypedContractMethod<
    [],
    [TranchePoolCore.PoolAccountingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoundEconomics"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalBuyerPurchases: bigint;
        totalSellerCollateral: bigint;
        matchedAmount: bigint;
        lockedCollateral: bigint;
        premiumPool: bigint;
        protocolFees: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoundParticipants"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [[string[], string[]] & { buyers: string[]; sellers: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellerPosition"
  ): TypedContractMethod<
    [roundId: BigNumberish, seller: AddressLike],
    [TranchePoolCore.SellerPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrancheInfo"
  ): TypedContractMethod<[], [TranchePoolCore.TrancheInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getYieldInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        yieldDeposited: bigint;
        yieldEarned: bigint;
        yieldRouterAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "insuranceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lockedShares"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "placeBuyerOrder"
  ): TypedContractMethod<
    [roundId: BigNumberish, purchaseAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolAccounting"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalAssets: bigint;
        totalShares: bigint;
        lockedAssets: bigint;
        premiumReserve: bigint;
        navPerShare: bigint;
        lastUpdateTime: bigint;
        yieldDeposited: bigint;
        yieldEarned: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseSellerCollateral"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roundBuyers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "roundSellers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "sellerPositions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        seller: string;
        collateralAmount: bigint;
        sharesMinted: bigint;
        premiumEarned: bigint;
        filledCollateral: bigint;
        lockedSharesAssigned: bigint;
        filled: boolean;
        refunded: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setFeeTreasury"
  ): TypedContractMethod<[newFeeTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSettlementEngine"
  ): TypedContractMethod<
    [_settlementEngine: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setYieldRouter"
  ): TypedContractMethod<[newYieldRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlementEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "shareBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "trancheInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string, boolean] & {
        trancheId: bigint;
        productId: bigint;
        productCatalog: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unfreezeRound"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProtocolFeeBps"
  ): TypedContractMethod<[newFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawForYield"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "yieldRouter"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BuyerOrderPlaced"
  ): TypedContractEvent<
    BuyerOrderPlacedEvent.InputTuple,
    BuyerOrderPlacedEvent.OutputTuple,
    BuyerOrderPlacedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposited"
  ): TypedContractEvent<
    CollateralDepositedEvent.InputTuple,
    CollateralDepositedEvent.OutputTuple,
    CollateralDepositedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralReleased"
  ): TypedContractEvent<
    CollateralReleasedEvent.InputTuple,
    CollateralReleasedEvent.OutputTuple,
    CollateralReleasedEvent.OutputObject
  >;
  getEvent(
    key: "FeeTreasuryUpdated"
  ): TypedContractEvent<
    FeeTreasuryUpdatedEvent.InputTuple,
    FeeTreasuryUpdatedEvent.OutputTuple,
    FeeTreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FundsMovedToYield"
  ): TypedContractEvent<
    FundsMovedToYieldEvent.InputTuple,
    FundsMovedToYieldEvent.OutputTuple,
    FundsMovedToYieldEvent.OutputObject
  >;
  getEvent(
    key: "FundsReturnedFromYield"
  ): TypedContractEvent<
    FundsReturnedFromYieldEvent.InputTuple,
    FundsReturnedFromYieldEvent.OutputTuple,
    FundsReturnedFromYieldEvent.OutputObject
  >;
  getEvent(
    key: "NAVUpdated"
  ): TypedContractEvent<
    NAVUpdatedEvent.InputTuple,
    NAVUpdatedEvent.OutputTuple,
    NAVUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PremiumCalculated"
  ): TypedContractEvent<
    PremiumCalculatedEvent.InputTuple,
    PremiumCalculatedEvent.OutputTuple,
    PremiumCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "PremiumDistributed"
  ): TypedContractEvent<
    PremiumDistributedEvent.InputTuple,
    PremiumDistributedEvent.OutputTuple,
    PremiumDistributedEvent.OutputObject
  >;
  getEvent(
    key: "PremiumTransferred"
  ): TypedContractEvent<
    PremiumTransferredEvent.InputTuple,
    PremiumTransferredEvent.OutputTuple,
    PremiumTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeUpdated"
  ): TypedContractEvent<
    ProtocolFeeUpdatedEvent.InputTuple,
    ProtocolFeeUpdatedEvent.OutputTuple,
    ProtocolFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RefundProcessed"
  ): TypedContractEvent<
    RefundProcessedEvent.InputTuple,
    RefundProcessedEvent.OutputTuple,
    RefundProcessedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoundFrozen"
  ): TypedContractEvent<
    RoundFrozenEvent.InputTuple,
    RoundFrozenEvent.OutputTuple,
    RoundFrozenEvent.OutputObject
  >;
  getEvent(
    key: "RoundMatched"
  ): TypedContractEvent<
    RoundMatchedEvent.InputTuple,
    RoundMatchedEvent.OutputTuple,
    RoundMatchedEvent.OutputObject
  >;
  getEvent(
    key: "RoundUnfrozen"
  ): TypedContractEvent<
    RoundUnfrozenEvent.InputTuple,
    RoundUnfrozenEvent.OutputTuple,
    RoundUnfrozenEvent.OutputObject
  >;
  getEvent(
    key: "SellerPositionCreated"
  ): TypedContractEvent<
    SellerPositionCreatedEvent.InputTuple,
    SellerPositionCreatedEvent.OutputTuple,
    SellerPositionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "YieldRouterUpdated"
  ): TypedContractEvent<
    YieldRouterUpdatedEvent.InputTuple,
    YieldRouterUpdatedEvent.OutputTuple,
    YieldRouterUpdatedEvent.OutputObject
  >;

  filters: {
    "BuyerOrderPlaced(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      BuyerOrderPlacedEvent.InputTuple,
      BuyerOrderPlacedEvent.OutputTuple,
      BuyerOrderPlacedEvent.OutputObject
    >;
    BuyerOrderPlaced: TypedContractEvent<
      BuyerOrderPlacedEvent.InputTuple,
      BuyerOrderPlacedEvent.OutputTuple,
      BuyerOrderPlacedEvent.OutputObject
    >;

    "CollateralDeposited(address,uint256,uint256)": TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;
    CollateralDeposited: TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;

    "CollateralReleased(uint256,address,uint256)": TypedContractEvent<
      CollateralReleasedEvent.InputTuple,
      CollateralReleasedEvent.OutputTuple,
      CollateralReleasedEvent.OutputObject
    >;
    CollateralReleased: TypedContractEvent<
      CollateralReleasedEvent.InputTuple,
      CollateralReleasedEvent.OutputTuple,
      CollateralReleasedEvent.OutputObject
    >;

    "FeeTreasuryUpdated(address,address,address,uint256)": TypedContractEvent<
      FeeTreasuryUpdatedEvent.InputTuple,
      FeeTreasuryUpdatedEvent.OutputTuple,
      FeeTreasuryUpdatedEvent.OutputObject
    >;
    FeeTreasuryUpdated: TypedContractEvent<
      FeeTreasuryUpdatedEvent.InputTuple,
      FeeTreasuryUpdatedEvent.OutputTuple,
      FeeTreasuryUpdatedEvent.OutputObject
    >;

    "FundsMovedToYield(uint256,address,uint256)": TypedContractEvent<
      FundsMovedToYieldEvent.InputTuple,
      FundsMovedToYieldEvent.OutputTuple,
      FundsMovedToYieldEvent.OutputObject
    >;
    FundsMovedToYield: TypedContractEvent<
      FundsMovedToYieldEvent.InputTuple,
      FundsMovedToYieldEvent.OutputTuple,
      FundsMovedToYieldEvent.OutputObject
    >;

    "FundsReturnedFromYield(uint256,uint256,uint256)": TypedContractEvent<
      FundsReturnedFromYieldEvent.InputTuple,
      FundsReturnedFromYieldEvent.OutputTuple,
      FundsReturnedFromYieldEvent.OutputObject
    >;
    FundsReturnedFromYield: TypedContractEvent<
      FundsReturnedFromYieldEvent.InputTuple,
      FundsReturnedFromYieldEvent.OutputTuple,
      FundsReturnedFromYieldEvent.OutputObject
    >;

    "NAVUpdated(uint256,uint256,uint256)": TypedContractEvent<
      NAVUpdatedEvent.InputTuple,
      NAVUpdatedEvent.OutputTuple,
      NAVUpdatedEvent.OutputObject
    >;
    NAVUpdated: TypedContractEvent<
      NAVUpdatedEvent.InputTuple,
      NAVUpdatedEvent.OutputTuple,
      NAVUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PremiumCalculated(uint256,address,uint256,uint256)": TypedContractEvent<
      PremiumCalculatedEvent.InputTuple,
      PremiumCalculatedEvent.OutputTuple,
      PremiumCalculatedEvent.OutputObject
    >;
    PremiumCalculated: TypedContractEvent<
      PremiumCalculatedEvent.InputTuple,
      PremiumCalculatedEvent.OutputTuple,
      PremiumCalculatedEvent.OutputObject
    >;

    "PremiumDistributed(uint256,uint256,uint256)": TypedContractEvent<
      PremiumDistributedEvent.InputTuple,
      PremiumDistributedEvent.OutputTuple,
      PremiumDistributedEvent.OutputObject
    >;
    PremiumDistributed: TypedContractEvent<
      PremiumDistributedEvent.InputTuple,
      PremiumDistributedEvent.OutputTuple,
      PremiumDistributedEvent.OutputObject
    >;

    "PremiumTransferred(uint256,address,uint256)": TypedContractEvent<
      PremiumTransferredEvent.InputTuple,
      PremiumTransferredEvent.OutputTuple,
      PremiumTransferredEvent.OutputObject
    >;
    PremiumTransferred: TypedContractEvent<
      PremiumTransferredEvent.InputTuple,
      PremiumTransferredEvent.OutputTuple,
      PremiumTransferredEvent.OutputObject
    >;

    "ProtocolFeeUpdated(uint256,uint256,address,uint256)": TypedContractEvent<
      ProtocolFeeUpdatedEvent.InputTuple,
      ProtocolFeeUpdatedEvent.OutputTuple,
      ProtocolFeeUpdatedEvent.OutputObject
    >;
    ProtocolFeeUpdated: TypedContractEvent<
      ProtocolFeeUpdatedEvent.InputTuple,
      ProtocolFeeUpdatedEvent.OutputTuple,
      ProtocolFeeUpdatedEvent.OutputObject
    >;

    "RefundProcessed(uint256,address,uint256,bool)": TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;
    RefundProcessed: TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoundFrozen(uint256,address,uint256)": TypedContractEvent<
      RoundFrozenEvent.InputTuple,
      RoundFrozenEvent.OutputTuple,
      RoundFrozenEvent.OutputObject
    >;
    RoundFrozen: TypedContractEvent<
      RoundFrozenEvent.InputTuple,
      RoundFrozenEvent.OutputTuple,
      RoundFrozenEvent.OutputObject
    >;

    "RoundMatched(uint256,uint256,uint256,uint256)": TypedContractEvent<
      RoundMatchedEvent.InputTuple,
      RoundMatchedEvent.OutputTuple,
      RoundMatchedEvent.OutputObject
    >;
    RoundMatched: TypedContractEvent<
      RoundMatchedEvent.InputTuple,
      RoundMatchedEvent.OutputTuple,
      RoundMatchedEvent.OutputObject
    >;

    "RoundUnfrozen(uint256,address,uint256)": TypedContractEvent<
      RoundUnfrozenEvent.InputTuple,
      RoundUnfrozenEvent.OutputTuple,
      RoundUnfrozenEvent.OutputObject
    >;
    RoundUnfrozen: TypedContractEvent<
      RoundUnfrozenEvent.InputTuple,
      RoundUnfrozenEvent.OutputTuple,
      RoundUnfrozenEvent.OutputObject
    >;

    "SellerPositionCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      SellerPositionCreatedEvent.InputTuple,
      SellerPositionCreatedEvent.OutputTuple,
      SellerPositionCreatedEvent.OutputObject
    >;
    SellerPositionCreated: TypedContractEvent<
      SellerPositionCreatedEvent.InputTuple,
      SellerPositionCreatedEvent.OutputTuple,
      SellerPositionCreatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "YieldRouterUpdated(address,address,address)": TypedContractEvent<
      YieldRouterUpdatedEvent.InputTuple,
      YieldRouterUpdatedEvent.OutputTuple,
      YieldRouterUpdatedEvent.OutputObject
    >;
    YieldRouterUpdated: TypedContractEvent<
      YieldRouterUpdatedEvent.InputTuple,
      YieldRouterUpdatedEvent.OutputTuple,
      YieldRouterUpdatedEvent.OutputObject
    >;
  };
}
