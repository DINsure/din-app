/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace YieldRouter {
  export type PoolInfoStruct = {
    poolAddress: AddressLike;
    trancheId: BigNumberish;
    fundsInYield: BigNumberish;
    totalYieldEarned: BigNumberish;
    registered: boolean;
    registrationTimestamp: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    poolAddress: string,
    trancheId: bigint,
    fundsInYield: bigint,
    totalYieldEarned: bigint,
    registered: boolean,
    registrationTimestamp: bigint
  ] & {
    poolAddress: string;
    trancheId: bigint;
    fundsInYield: bigint;
    totalYieldEarned: bigint;
    registered: boolean;
    registrationTimestamp: bigint;
  };

  export type YieldRecordStruct = {
    totalDeposited: BigNumberish;
    totalReturned: BigNumberish;
    totalYieldGenerated: BigNumberish;
    lastUpdateTimestamp: BigNumberish;
  };

  export type YieldRecordStructOutput = [
    totalDeposited: bigint,
    totalReturned: bigint,
    totalYieldGenerated: bigint,
    lastUpdateTimestamp: bigint
  ] & {
    totalDeposited: bigint;
    totalReturned: bigint;
    totalYieldGenerated: bigint;
    lastUpdateTimestamp: bigint;
  };
}

export interface YieldRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "adminDeposit"
      | "adminWithdraw"
      | "emergencyReturnAllFunds"
      | "getAvailableForWithdrawal"
      | "getPoolInfo"
      | "getRegisteredPools"
      | "getRoleAdmin"
      | "getTotalBalance"
      | "getTotalValueAtRisk"
      | "getYieldRecord"
      | "getYieldStatus"
      | "grantRole"
      | "hasRole"
      | "moveFromPool"
      | "pause"
      | "paused"
      | "poolInfo"
      | "registerPool"
      | "registeredPools"
      | "registry"
      | "renounceRole"
      | "returnToPool"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
      | "usdtToken"
      | "yieldRecord"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminDeposit"
      | "AdminWithdrawal"
      | "FundsMovedToYield"
      | "FundsReturnedToPool"
      | "Paused"
      | "PoolRegistered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "YieldGenerated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminDeposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyReturnAllFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableForWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueAtRisk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldRecord",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moveFromPool",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "returnToPool",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldRecord",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyReturnAllFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueAtRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yieldRecord",
    data: BytesLike
  ): Result;
}

export namespace AdminDepositEvent {
  export type InputTuple = [
    admin: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish,
    purpose: string
  ];
  export type OutputTuple = [
    admin: string,
    amount: bigint,
    timestamp: bigint,
    purpose: string
  ];
  export interface OutputObject {
    admin: string;
    amount: bigint;
    timestamp: bigint;
    purpose: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminWithdrawalEvent {
  export type InputTuple = [
    admin: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish,
    purpose: string
  ];
  export type OutputTuple = [
    admin: string,
    amount: bigint,
    timestamp: bigint,
    purpose: string
  ];
  export interface OutputObject {
    admin: string;
    amount: bigint;
    timestamp: bigint;
    purpose: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsMovedToYieldEvent {
  export type InputTuple = [
    poolAddress: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    poolAddress: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    poolAddress: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReturnedToPoolEvent {
  export type InputTuple = [
    poolAddress: AddressLike,
    principalAmount: BigNumberish,
    yieldAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    poolAddress: string,
    principalAmount: bigint,
    yieldAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    poolAddress: string;
    principalAmount: bigint;
    yieldAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolRegisteredEvent {
  export type InputTuple = [
    poolAddress: AddressLike,
    trancheId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    poolAddress: string,
    trancheId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    poolAddress: string;
    trancheId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldGeneratedEvent {
  export type InputTuple = [
    totalAmount: BigNumberish,
    yieldAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    totalAmount: bigint,
    yieldAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    totalAmount: bigint;
    yieldAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YieldRouter extends BaseContract {
  connect(runner?: ContractRunner | null): YieldRouter;
  waitForDeployment(): Promise<this>;

  interface: YieldRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  adminDeposit: TypedContractMethod<
    [amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;

  adminWithdraw: TypedContractMethod<
    [amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;

  emergencyReturnAllFunds: TypedContractMethod<[], [void], "nonpayable">;

  getAvailableForWithdrawal: TypedContractMethod<[], [bigint], "view">;

  getPoolInfo: TypedContractMethod<
    [poolAddress: AddressLike],
    [YieldRouter.PoolInfoStructOutput],
    "view"
  >;

  getRegisteredPools: TypedContractMethod<[], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalBalance: TypedContractMethod<[], [bigint], "view">;

  getTotalValueAtRisk: TypedContractMethod<[], [bigint], "view">;

  getYieldRecord: TypedContractMethod<
    [],
    [YieldRouter.YieldRecordStructOutput],
    "view"
  >;

  getYieldStatus: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        YieldRouter.YieldRecordStructOutput
      ] & {
        totalBalance: bigint;
        totalValueAtRisk: bigint;
        availableForWithdrawal: bigint;
        totalPoolsRegistered: bigint;
        totalActiveDeposits: bigint;
        record: YieldRouter.YieldRecordStructOutput;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  moveFromPool: TypedContractMethod<
    [poolAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  poolInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, bigint] & {
        poolAddress: string;
        trancheId: bigint;
        fundsInYield: bigint;
        totalYieldEarned: bigint;
        registered: boolean;
        registrationTimestamp: bigint;
      }
    ],
    "view"
  >;

  registerPool: TypedContractMethod<
    [poolAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  registeredPools: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  returnToPool: TypedContractMethod<
    [poolAddress: AddressLike, yieldAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usdtToken: TypedContractMethod<[], [string], "view">;

  yieldRecord: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalDeposited: bigint;
        totalReturned: bigint;
        totalYieldGenerated: bigint;
        lastUpdateTimestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adminDeposit"
  ): TypedContractMethod<
    [amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminWithdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyReturnAllFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAvailableForWithdrawal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolInfo"
  ): TypedContractMethod<
    [poolAddress: AddressLike],
    [YieldRouter.PoolInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRegisteredPools"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalValueAtRisk"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getYieldRecord"
  ): TypedContractMethod<[], [YieldRouter.YieldRecordStructOutput], "view">;
  getFunction(
    nameOrSignature: "getYieldStatus"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        YieldRouter.YieldRecordStructOutput
      ] & {
        totalBalance: bigint;
        totalValueAtRisk: bigint;
        availableForWithdrawal: bigint;
        totalPoolsRegistered: bigint;
        totalActiveDeposits: bigint;
        record: YieldRouter.YieldRecordStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "moveFromPool"
  ): TypedContractMethod<
    [poolAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "poolInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, bigint] & {
        poolAddress: string;
        trancheId: bigint;
        fundsInYield: bigint;
        totalYieldEarned: bigint;
        registered: boolean;
        registrationTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerPool"
  ): TypedContractMethod<[poolAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredPools"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "returnToPool"
  ): TypedContractMethod<
    [poolAddress: AddressLike, yieldAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "yieldRecord"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalDeposited: bigint;
        totalReturned: bigint;
        totalYieldGenerated: bigint;
        lastUpdateTimestamp: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AdminDeposit"
  ): TypedContractEvent<
    AdminDepositEvent.InputTuple,
    AdminDepositEvent.OutputTuple,
    AdminDepositEvent.OutputObject
  >;
  getEvent(
    key: "AdminWithdrawal"
  ): TypedContractEvent<
    AdminWithdrawalEvent.InputTuple,
    AdminWithdrawalEvent.OutputTuple,
    AdminWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "FundsMovedToYield"
  ): TypedContractEvent<
    FundsMovedToYieldEvent.InputTuple,
    FundsMovedToYieldEvent.OutputTuple,
    FundsMovedToYieldEvent.OutputObject
  >;
  getEvent(
    key: "FundsReturnedToPool"
  ): TypedContractEvent<
    FundsReturnedToPoolEvent.InputTuple,
    FundsReturnedToPoolEvent.OutputTuple,
    FundsReturnedToPoolEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PoolRegistered"
  ): TypedContractEvent<
    PoolRegisteredEvent.InputTuple,
    PoolRegisteredEvent.OutputTuple,
    PoolRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "YieldGenerated"
  ): TypedContractEvent<
    YieldGeneratedEvent.InputTuple,
    YieldGeneratedEvent.OutputTuple,
    YieldGeneratedEvent.OutputObject
  >;

  filters: {
    "AdminDeposit(address,uint256,uint256,string)": TypedContractEvent<
      AdminDepositEvent.InputTuple,
      AdminDepositEvent.OutputTuple,
      AdminDepositEvent.OutputObject
    >;
    AdminDeposit: TypedContractEvent<
      AdminDepositEvent.InputTuple,
      AdminDepositEvent.OutputTuple,
      AdminDepositEvent.OutputObject
    >;

    "AdminWithdrawal(address,uint256,uint256,string)": TypedContractEvent<
      AdminWithdrawalEvent.InputTuple,
      AdminWithdrawalEvent.OutputTuple,
      AdminWithdrawalEvent.OutputObject
    >;
    AdminWithdrawal: TypedContractEvent<
      AdminWithdrawalEvent.InputTuple,
      AdminWithdrawalEvent.OutputTuple,
      AdminWithdrawalEvent.OutputObject
    >;

    "FundsMovedToYield(address,uint256,uint256)": TypedContractEvent<
      FundsMovedToYieldEvent.InputTuple,
      FundsMovedToYieldEvent.OutputTuple,
      FundsMovedToYieldEvent.OutputObject
    >;
    FundsMovedToYield: TypedContractEvent<
      FundsMovedToYieldEvent.InputTuple,
      FundsMovedToYieldEvent.OutputTuple,
      FundsMovedToYieldEvent.OutputObject
    >;

    "FundsReturnedToPool(address,uint256,uint256,uint256)": TypedContractEvent<
      FundsReturnedToPoolEvent.InputTuple,
      FundsReturnedToPoolEvent.OutputTuple,
      FundsReturnedToPoolEvent.OutputObject
    >;
    FundsReturnedToPool: TypedContractEvent<
      FundsReturnedToPoolEvent.InputTuple,
      FundsReturnedToPoolEvent.OutputTuple,
      FundsReturnedToPoolEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PoolRegistered(address,uint256,uint256)": TypedContractEvent<
      PoolRegisteredEvent.InputTuple,
      PoolRegisteredEvent.OutputTuple,
      PoolRegisteredEvent.OutputObject
    >;
    PoolRegistered: TypedContractEvent<
      PoolRegisteredEvent.InputTuple,
      PoolRegisteredEvent.OutputTuple,
      PoolRegisteredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "YieldGenerated(uint256,uint256,uint256)": TypedContractEvent<
      YieldGeneratedEvent.InputTuple,
      YieldGeneratedEvent.OutputTuple,
      YieldGeneratedEvent.OutputObject
    >;
    YieldGenerated: TypedContractEvent<
      YieldGeneratedEvent.InputTuple,
      YieldGeneratedEvent.OutputTuple,
      YieldGeneratedEvent.OutputObject
    >;
  };
}
